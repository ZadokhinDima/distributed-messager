/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 1246.0, "series": [{"data": [[0.0, 2.0], [0.1, 3.0], [0.2, 3.0], [0.3, 3.0], [0.4, 3.0], [0.5, 4.0], [0.6, 4.0], [0.7, 4.0], [0.8, 4.0], [0.9, 4.0], [1.0, 4.0], [1.1, 4.0], [1.2, 4.0], [1.3, 4.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 6.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 7.0], [3.8, 7.0], [3.9, 7.0], [4.0, 7.0], [4.1, 7.0], [4.2, 7.0], [4.3, 7.0], [4.4, 7.0], [4.5, 7.0], [4.6, 7.0], [4.7, 7.0], [4.8, 7.0], [4.9, 8.0], [5.0, 8.0], [5.1, 8.0], [5.2, 8.0], [5.3, 8.0], [5.4, 8.0], [5.5, 8.0], [5.6, 8.0], [5.7, 8.0], [5.8, 8.0], [5.9, 8.0], [6.0, 8.0], [6.1, 8.0], [6.2, 9.0], [6.3, 9.0], [6.4, 9.0], [6.5, 9.0], [6.6, 9.0], [6.7, 9.0], [6.8, 9.0], [6.9, 9.0], [7.0, 9.0], [7.1, 9.0], [7.2, 10.0], [7.3, 10.0], [7.4, 10.0], [7.5, 10.0], [7.6, 10.0], [7.7, 10.0], [7.8, 10.0], [7.9, 10.0], [8.0, 10.0], [8.1, 11.0], [8.2, 11.0], [8.3, 11.0], [8.4, 11.0], [8.5, 11.0], [8.6, 11.0], [8.7, 11.0], [8.8, 11.0], [8.9, 11.0], [9.0, 11.0], [9.1, 11.0], [9.2, 12.0], [9.3, 12.0], [9.4, 12.0], [9.5, 12.0], [9.6, 12.0], [9.7, 12.0], [9.8, 12.0], [9.9, 12.0], [10.0, 12.0], [10.1, 13.0], [10.2, 13.0], [10.3, 13.0], [10.4, 13.0], [10.5, 13.0], [10.6, 13.0], [10.7, 13.0], [10.8, 14.0], [10.9, 14.0], [11.0, 14.0], [11.1, 14.0], [11.2, 14.0], [11.3, 14.0], [11.4, 15.0], [11.5, 15.0], [11.6, 15.0], [11.7, 15.0], [11.8, 15.0], [11.9, 15.0], [12.0, 15.0], [12.1, 16.0], [12.2, 16.0], [12.3, 16.0], [12.4, 16.0], [12.5, 16.0], [12.6, 17.0], [12.7, 17.0], [12.8, 17.0], [12.9, 18.0], [13.0, 18.0], [13.1, 18.0], [13.2, 18.0], [13.3, 19.0], [13.4, 19.0], [13.5, 19.0], [13.6, 20.0], [13.7, 20.0], [13.8, 21.0], [13.9, 21.0], [14.0, 22.0], [14.1, 22.0], [14.2, 23.0], [14.3, 23.0], [14.4, 23.0], [14.5, 24.0], [14.6, 24.0], [14.7, 24.0], [14.8, 24.0], [14.9, 24.0], [15.0, 25.0], [15.1, 25.0], [15.2, 25.0], [15.3, 25.0], [15.4, 26.0], [15.5, 26.0], [15.6, 26.0], [15.7, 26.0], [15.8, 27.0], [15.9, 27.0], [16.0, 27.0], [16.1, 27.0], [16.2, 28.0], [16.3, 28.0], [16.4, 28.0], [16.5, 28.0], [16.6, 28.0], [16.7, 28.0], [16.8, 29.0], [16.9, 29.0], [17.0, 29.0], [17.1, 30.0], [17.2, 30.0], [17.3, 30.0], [17.4, 30.0], [17.5, 30.0], [17.6, 30.0], [17.7, 31.0], [17.8, 31.0], [17.9, 31.0], [18.0, 31.0], [18.1, 31.0], [18.2, 31.0], [18.3, 32.0], [18.4, 32.0], [18.5, 32.0], [18.6, 32.0], [18.7, 32.0], [18.8, 32.0], [18.9, 33.0], [19.0, 33.0], [19.1, 33.0], [19.2, 33.0], [19.3, 33.0], [19.4, 33.0], [19.5, 34.0], [19.6, 34.0], [19.7, 34.0], [19.8, 34.0], [19.9, 34.0], [20.0, 34.0], [20.1, 34.0], [20.2, 35.0], [20.3, 35.0], [20.4, 35.0], [20.5, 35.0], [20.6, 35.0], [20.7, 36.0], [20.8, 36.0], [20.9, 36.0], [21.0, 36.0], [21.1, 37.0], [21.2, 37.0], [21.3, 37.0], [21.4, 37.0], [21.5, 38.0], [21.6, 38.0], [21.7, 38.0], [21.8, 38.0], [21.9, 38.0], [22.0, 39.0], [22.1, 39.0], [22.2, 39.0], [22.3, 40.0], [22.4, 40.0], [22.5, 41.0], [22.6, 41.0], [22.7, 41.0], [22.8, 42.0], [22.9, 42.0], [23.0, 42.0], [23.1, 43.0], [23.2, 43.0], [23.3, 43.0], [23.4, 43.0], [23.5, 44.0], [23.6, 44.0], [23.7, 44.0], [23.8, 45.0], [23.9, 45.0], [24.0, 45.0], [24.1, 46.0], [24.2, 46.0], [24.3, 47.0], [24.4, 47.0], [24.5, 48.0], [24.6, 48.0], [24.7, 49.0], [24.8, 49.0], [24.9, 50.0], [25.0, 50.0], [25.1, 51.0], [25.2, 51.0], [25.3, 51.0], [25.4, 52.0], [25.5, 52.0], [25.6, 52.0], [25.7, 52.0], [25.8, 53.0], [25.9, 53.0], [26.0, 53.0], [26.1, 53.0], [26.2, 54.0], [26.3, 54.0], [26.4, 54.0], [26.5, 54.0], [26.6, 55.0], [26.7, 55.0], [26.8, 55.0], [26.9, 55.0], [27.0, 56.0], [27.1, 56.0], [27.2, 56.0], [27.3, 57.0], [27.4, 57.0], [27.5, 57.0], [27.6, 57.0], [27.7, 58.0], [27.8, 58.0], [27.9, 58.0], [28.0, 58.0], [28.1, 59.0], [28.2, 59.0], [28.3, 59.0], [28.4, 60.0], [28.5, 60.0], [28.6, 60.0], [28.7, 60.0], [28.8, 61.0], [28.9, 61.0], [29.0, 61.0], [29.1, 62.0], [29.2, 62.0], [29.3, 62.0], [29.4, 63.0], [29.5, 63.0], [29.6, 64.0], [29.7, 64.0], [29.8, 64.0], [29.9, 65.0], [30.0, 65.0], [30.1, 65.0], [30.2, 66.0], [30.3, 66.0], [30.4, 66.0], [30.5, 66.0], [30.6, 67.0], [30.7, 67.0], [30.8, 67.0], [30.9, 68.0], [31.0, 68.0], [31.1, 68.0], [31.2, 68.0], [31.3, 69.0], [31.4, 69.0], [31.5, 70.0], [31.6, 70.0], [31.7, 70.0], [31.8, 70.0], [31.9, 71.0], [32.0, 71.0], [32.1, 71.0], [32.2, 72.0], [32.3, 72.0], [32.4, 73.0], [32.5, 73.0], [32.6, 73.0], [32.7, 74.0], [32.8, 74.0], [32.9, 74.0], [33.0, 75.0], [33.1, 75.0], [33.2, 76.0], [33.3, 76.0], [33.4, 77.0], [33.5, 77.0], [33.6, 78.0], [33.7, 79.0], [33.8, 79.0], [33.9, 79.0], [34.0, 80.0], [34.1, 80.0], [34.2, 80.0], [34.3, 81.0], [34.4, 81.0], [34.5, 82.0], [34.6, 82.0], [34.7, 83.0], [34.8, 83.0], [34.9, 83.0], [35.0, 83.0], [35.1, 83.0], [35.2, 84.0], [35.3, 84.0], [35.4, 84.0], [35.5, 85.0], [35.6, 85.0], [35.7, 85.0], [35.8, 86.0], [35.9, 86.0], [36.0, 86.0], [36.1, 87.0], [36.2, 87.0], [36.3, 88.0], [36.4, 88.0], [36.5, 88.0], [36.6, 88.0], [36.7, 88.0], [36.8, 89.0], [36.9, 89.0], [37.0, 89.0], [37.1, 89.0], [37.2, 89.0], [37.3, 90.0], [37.4, 90.0], [37.5, 90.0], [37.6, 90.0], [37.7, 91.0], [37.8, 91.0], [37.9, 91.0], [38.0, 91.0], [38.1, 92.0], [38.2, 92.0], [38.3, 92.0], [38.4, 92.0], [38.5, 93.0], [38.6, 93.0], [38.7, 93.0], [38.8, 94.0], [38.9, 94.0], [39.0, 94.0], [39.1, 94.0], [39.2, 95.0], [39.3, 95.0], [39.4, 95.0], [39.5, 96.0], [39.6, 96.0], [39.7, 96.0], [39.8, 97.0], [39.9, 97.0], [40.0, 97.0], [40.1, 98.0], [40.2, 98.0], [40.3, 98.0], [40.4, 99.0], [40.5, 99.0], [40.6, 99.0], [40.7, 100.0], [40.8, 100.0], [40.9, 101.0], [41.0, 101.0], [41.1, 102.0], [41.2, 102.0], [41.3, 103.0], [41.4, 103.0], [41.5, 104.0], [41.6, 105.0], [41.7, 105.0], [41.8, 106.0], [41.9, 106.0], [42.0, 107.0], [42.1, 108.0], [42.2, 108.0], [42.3, 109.0], [42.4, 109.0], [42.5, 110.0], [42.6, 110.0], [42.7, 111.0], [42.8, 111.0], [42.9, 112.0], [43.0, 112.0], [43.1, 113.0], [43.2, 113.0], [43.3, 113.0], [43.4, 113.0], [43.5, 114.0], [43.6, 114.0], [43.7, 114.0], [43.8, 115.0], [43.9, 115.0], [44.0, 115.0], [44.1, 116.0], [44.2, 116.0], [44.3, 117.0], [44.4, 117.0], [44.5, 118.0], [44.6, 118.0], [44.7, 118.0], [44.8, 119.0], [44.9, 119.0], [45.0, 120.0], [45.1, 120.0], [45.2, 120.0], [45.3, 121.0], [45.4, 121.0], [45.5, 121.0], [45.6, 122.0], [45.7, 122.0], [45.8, 123.0], [45.9, 123.0], [46.0, 124.0], [46.1, 124.0], [46.2, 124.0], [46.3, 125.0], [46.4, 125.0], [46.5, 126.0], [46.6, 126.0], [46.7, 127.0], [46.8, 127.0], [46.9, 127.0], [47.0, 128.0], [47.1, 128.0], [47.2, 128.0], [47.3, 129.0], [47.4, 129.0], [47.5, 129.0], [47.6, 130.0], [47.7, 130.0], [47.8, 131.0], [47.9, 131.0], [48.0, 131.0], [48.1, 131.0], [48.2, 131.0], [48.3, 132.0], [48.4, 132.0], [48.5, 132.0], [48.6, 132.0], [48.7, 133.0], [48.8, 133.0], [48.9, 133.0], [49.0, 133.0], [49.1, 134.0], [49.2, 134.0], [49.3, 134.0], [49.4, 134.0], [49.5, 135.0], [49.6, 135.0], [49.7, 135.0], [49.8, 135.0], [49.9, 136.0], [50.0, 136.0], [50.1, 136.0], [50.2, 136.0], [50.3, 136.0], [50.4, 137.0], [50.5, 137.0], [50.6, 137.0], [50.7, 137.0], [50.8, 138.0], [50.9, 138.0], [51.0, 138.0], [51.1, 139.0], [51.2, 139.0], [51.3, 139.0], [51.4, 139.0], [51.5, 140.0], [51.6, 140.0], [51.7, 140.0], [51.8, 140.0], [51.9, 140.0], [52.0, 141.0], [52.1, 141.0], [52.2, 141.0], [52.3, 141.0], [52.4, 141.0], [52.5, 142.0], [52.6, 142.0], [52.7, 142.0], [52.8, 142.0], [52.9, 142.0], [53.0, 143.0], [53.1, 143.0], [53.2, 143.0], [53.3, 143.0], [53.4, 144.0], [53.5, 144.0], [53.6, 144.0], [53.7, 144.0], [53.8, 144.0], [53.9, 144.0], [54.0, 145.0], [54.1, 145.0], [54.2, 145.0], [54.3, 145.0], [54.4, 145.0], [54.5, 146.0], [54.6, 146.0], [54.7, 146.0], [54.8, 146.0], [54.9, 146.0], [55.0, 146.0], [55.1, 147.0], [55.2, 147.0], [55.3, 147.0], [55.4, 147.0], [55.5, 147.0], [55.6, 148.0], [55.7, 148.0], [55.8, 148.0], [55.9, 148.0], [56.0, 148.0], [56.1, 148.0], [56.2, 149.0], [56.3, 149.0], [56.4, 149.0], [56.5, 149.0], [56.6, 149.0], [56.7, 149.0], [56.8, 149.0], [56.9, 150.0], [57.0, 150.0], [57.1, 150.0], [57.2, 150.0], [57.3, 150.0], [57.4, 151.0], [57.5, 151.0], [57.6, 151.0], [57.7, 151.0], [57.8, 151.0], [57.9, 151.0], [58.0, 152.0], [58.1, 152.0], [58.2, 152.0], [58.3, 152.0], [58.4, 152.0], [58.5, 152.0], [58.6, 153.0], [58.7, 153.0], [58.8, 153.0], [58.9, 153.0], [59.0, 153.0], [59.1, 153.0], [59.2, 153.0], [59.3, 154.0], [59.4, 154.0], [59.5, 154.0], [59.6, 154.0], [59.7, 154.0], [59.8, 154.0], [59.9, 155.0], [60.0, 155.0], [60.1, 155.0], [60.2, 155.0], [60.3, 155.0], [60.4, 156.0], [60.5, 156.0], [60.6, 156.0], [60.7, 156.0], [60.8, 156.0], [60.9, 157.0], [61.0, 157.0], [61.1, 157.0], [61.2, 157.0], [61.3, 157.0], [61.4, 157.0], [61.5, 157.0], [61.6, 158.0], [61.7, 158.0], [61.8, 158.0], [61.9, 158.0], [62.0, 158.0], [62.1, 158.0], [62.2, 159.0], [62.3, 159.0], [62.4, 159.0], [62.5, 159.0], [62.6, 159.0], [62.7, 159.0], [62.8, 159.0], [62.9, 160.0], [63.0, 160.0], [63.1, 160.0], [63.2, 160.0], [63.3, 160.0], [63.4, 160.0], [63.5, 160.0], [63.6, 161.0], [63.7, 161.0], [63.8, 161.0], [63.9, 161.0], [64.0, 161.0], [64.1, 161.0], [64.2, 162.0], [64.3, 162.0], [64.4, 162.0], [64.5, 162.0], [64.6, 162.0], [64.7, 163.0], [64.8, 163.0], [64.9, 163.0], [65.0, 163.0], [65.1, 163.0], [65.2, 164.0], [65.3, 164.0], [65.4, 164.0], [65.5, 164.0], [65.6, 164.0], [65.7, 165.0], [65.8, 165.0], [65.9, 165.0], [66.0, 165.0], [66.1, 165.0], [66.2, 165.0], [66.3, 166.0], [66.4, 166.0], [66.5, 166.0], [66.6, 166.0], [66.7, 167.0], [66.8, 167.0], [66.9, 167.0], [67.0, 167.0], [67.1, 167.0], [67.2, 167.0], [67.3, 168.0], [67.4, 168.0], [67.5, 168.0], [67.6, 168.0], [67.7, 168.0], [67.8, 169.0], [67.9, 169.0], [68.0, 169.0], [68.1, 169.0], [68.2, 169.0], [68.3, 170.0], [68.4, 170.0], [68.5, 170.0], [68.6, 170.0], [68.7, 171.0], [68.8, 171.0], [68.9, 171.0], [69.0, 172.0], [69.1, 172.0], [69.2, 172.0], [69.3, 172.0], [69.4, 172.0], [69.5, 173.0], [69.6, 173.0], [69.7, 173.0], [69.8, 174.0], [69.9, 174.0], [70.0, 174.0], [70.1, 174.0], [70.2, 174.0], [70.3, 174.0], [70.4, 175.0], [70.5, 175.0], [70.6, 175.0], [70.7, 175.0], [70.8, 175.0], [70.9, 176.0], [71.0, 176.0], [71.1, 176.0], [71.2, 177.0], [71.3, 177.0], [71.4, 177.0], [71.5, 178.0], [71.6, 178.0], [71.7, 178.0], [71.8, 179.0], [71.9, 179.0], [72.0, 179.0], [72.1, 180.0], [72.2, 180.0], [72.3, 180.0], [72.4, 181.0], [72.5, 181.0], [72.6, 181.0], [72.7, 182.0], [72.8, 182.0], [72.9, 183.0], [73.0, 183.0], [73.1, 183.0], [73.2, 183.0], [73.3, 184.0], [73.4, 184.0], [73.5, 184.0], [73.6, 184.0], [73.7, 184.0], [73.8, 185.0], [73.9, 185.0], [74.0, 185.0], [74.1, 186.0], [74.2, 186.0], [74.3, 186.0], [74.4, 186.0], [74.5, 187.0], [74.6, 187.0], [74.7, 187.0], [74.8, 187.0], [74.9, 188.0], [75.0, 188.0], [75.1, 188.0], [75.2, 189.0], [75.3, 189.0], [75.4, 189.0], [75.5, 189.0], [75.6, 190.0], [75.7, 190.0], [75.8, 190.0], [75.9, 190.0], [76.0, 191.0], [76.1, 191.0], [76.2, 191.0], [76.3, 192.0], [76.4, 192.0], [76.5, 192.0], [76.6, 192.0], [76.7, 193.0], [76.8, 193.0], [76.9, 193.0], [77.0, 193.0], [77.1, 194.0], [77.2, 194.0], [77.3, 194.0], [77.4, 195.0], [77.5, 195.0], [77.6, 195.0], [77.7, 195.0], [77.8, 196.0], [77.9, 196.0], [78.0, 196.0], [78.1, 196.0], [78.2, 197.0], [78.3, 197.0], [78.4, 197.0], [78.5, 198.0], [78.6, 198.0], [78.7, 198.0], [78.8, 199.0], [78.9, 199.0], [79.0, 199.0], [79.1, 199.0], [79.2, 200.0], [79.3, 200.0], [79.4, 201.0], [79.5, 201.0], [79.6, 201.0], [79.7, 201.0], [79.8, 202.0], [79.9, 202.0], [80.0, 202.0], [80.1, 203.0], [80.2, 203.0], [80.3, 203.0], [80.4, 204.0], [80.5, 204.0], [80.6, 205.0], [80.7, 205.0], [80.8, 205.0], [80.9, 206.0], [81.0, 206.0], [81.1, 207.0], [81.2, 207.0], [81.3, 208.0], [81.4, 208.0], [81.5, 209.0], [81.6, 209.0], [81.7, 209.0], [81.8, 210.0], [81.9, 210.0], [82.0, 211.0], [82.1, 211.0], [82.2, 212.0], [82.3, 212.0], [82.4, 212.0], [82.5, 213.0], [82.6, 213.0], [82.7, 213.0], [82.8, 214.0], [82.9, 214.0], [83.0, 215.0], [83.1, 215.0], [83.2, 216.0], [83.3, 216.0], [83.4, 216.0], [83.5, 217.0], [83.6, 218.0], [83.7, 218.0], [83.8, 219.0], [83.9, 219.0], [84.0, 220.0], [84.1, 221.0], [84.2, 222.0], [84.3, 223.0], [84.4, 223.0], [84.5, 223.0], [84.6, 224.0], [84.7, 224.0], [84.8, 225.0], [84.9, 226.0], [85.0, 227.0], [85.1, 227.0], [85.2, 228.0], [85.3, 229.0], [85.4, 230.0], [85.5, 231.0], [85.6, 231.0], [85.7, 232.0], [85.8, 233.0], [85.9, 234.0], [86.0, 235.0], [86.1, 236.0], [86.2, 236.0], [86.3, 237.0], [86.4, 237.0], [86.5, 238.0], [86.6, 238.0], [86.7, 239.0], [86.8, 240.0], [86.9, 240.0], [87.0, 241.0], [87.1, 242.0], [87.2, 242.0], [87.3, 243.0], [87.4, 244.0], [87.5, 245.0], [87.6, 245.0], [87.7, 246.0], [87.8, 247.0], [87.9, 248.0], [88.0, 249.0], [88.1, 250.0], [88.2, 251.0], [88.3, 252.0], [88.4, 253.0], [88.5, 254.0], [88.6, 254.0], [88.7, 255.0], [88.8, 256.0], [88.9, 257.0], [89.0, 258.0], [89.1, 258.0], [89.2, 259.0], [89.3, 260.0], [89.4, 262.0], [89.5, 263.0], [89.6, 264.0], [89.7, 265.0], [89.8, 267.0], [89.9, 268.0], [90.0, 268.0], [90.1, 268.0], [90.2, 269.0], [90.3, 270.0], [90.4, 271.0], [90.5, 272.0], [90.6, 273.0], [90.7, 274.0], [90.8, 274.0], [90.9, 275.0], [91.0, 275.0], [91.1, 276.0], [91.2, 276.0], [91.3, 277.0], [91.4, 277.0], [91.5, 278.0], [91.6, 278.0], [91.7, 279.0], [91.8, 279.0], [91.9, 280.0], [92.0, 280.0], [92.1, 281.0], [92.2, 282.0], [92.3, 282.0], [92.4, 283.0], [92.5, 284.0], [92.6, 284.0], [92.7, 284.0], [92.8, 285.0], [92.9, 285.0], [93.0, 286.0], [93.1, 286.0], [93.2, 287.0], [93.3, 287.0], [93.4, 288.0], [93.5, 288.0], [93.6, 289.0], [93.7, 289.0], [93.8, 290.0], [93.9, 290.0], [94.0, 290.0], [94.1, 291.0], [94.2, 291.0], [94.3, 292.0], [94.4, 292.0], [94.5, 293.0], [94.6, 294.0], [94.7, 295.0], [94.8, 295.0], [94.9, 297.0], [95.0, 301.0], [95.1, 304.0], [95.2, 306.0], [95.3, 307.0], [95.4, 309.0], [95.5, 312.0], [95.6, 314.0], [95.7, 317.0], [95.8, 319.0], [95.9, 325.0], [96.0, 336.0], [96.1, 402.0], [96.2, 407.0], [96.3, 409.0], [96.4, 412.0], [96.5, 415.0], [96.6, 418.0], [96.7, 422.0], [96.8, 426.0], [96.9, 434.0], [97.0, 461.0], [97.1, 475.0], [97.2, 490.0], [97.3, 499.0], [97.4, 511.0], [97.5, 539.0], [97.6, 1064.0], [97.7, 1086.0], [97.8, 1128.0], [97.9, 1143.0], [98.0, 1152.0], [98.1, 1155.0], [98.2, 1159.0], [98.3, 1162.0], [98.4, 1164.0], [98.5, 1166.0], [98.6, 1168.0], [98.7, 1171.0], [98.8, 1173.0], [98.9, 1175.0], [99.0, 1178.0], [99.1, 1184.0], [99.2, 1189.0], [99.3, 1196.0], [99.4, 1199.0], [99.5, 1202.0], [99.6, 1205.0], [99.7, 1208.0], [99.8, 1215.0], [99.9, 1220.0], [100.0, 1246.0]], "isOverall": false, "label": "Read User", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 19.0, "minX": 0.0, "maxY": 4067.0, "series": [{"data": [[0.0, 4067.0], [1100.0, 171.0], [300.0, 107.0], [1200.0, 59.0], [100.0, 3849.0], [200.0, 1581.0], [400.0, 127.0], [500.0, 19.0], [1000.0, 20.0]], "isOverall": false, "label": "Read User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 94.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9637.0, "series": [{"data": [[0.0, 9637.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 269.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 94.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 339.6446000000015, "minX": 1.73335842E12, "maxY": 339.6446000000015, "series": [{"data": [[1.73335842E12, 339.6446000000015]], "isOverall": false, "label": "Test Distributed Messenger", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73335842E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9.1875, "minX": 1.0, "maxY": 1127.5, "series": [{"data": [[2.0, 112.0], [3.0, 46.333333333333336], [4.0, 215.0], [5.0, 50.8], [6.0, 88.14285714285715], [7.0, 9.2], [8.0, 31.066666666666666], [9.0, 18.666666666666664], [10.0, 9.959999999999999], [11.0, 18.1], [12.0, 9.1875], [13.0, 23.074074074074073], [14.0, 26.944444444444443], [15.0, 30.200000000000003], [16.0, 37.55555555555556], [17.0, 16.631578947368418], [18.0, 24.799999999999997], [19.0, 56.25000000000001], [20.0, 30.432432432432424], [21.0, 74.3125], [22.0, 72.0], [23.0, 35.125], [24.0, 36.25], [25.0, 43.74999999999999], [26.0, 33.0625], [27.0, 32.73684210526316], [28.0, 33.916666666666664], [29.0, 18.731707317073173], [30.0, 13.025], [31.0, 10.283333333333337], [33.0, 23.375000000000004], [32.0, 9.789473684210527], [34.0, 21.238095238095237], [35.0, 52.82608695652174], [36.0, 36.6], [37.0, 47.73684210526315], [39.0, 83.0], [38.0, 33.06250000000001], [40.0, 10.899999999999999], [41.0, 40.625], [43.0, 52.75000000000001], [42.0, 14.0], [45.0, 72.0], [44.0, 100.18181818181819], [47.0, 79.125], [46.0, 140.8], [49.0, 112.0], [48.0, 76.4], [51.0, 34.666666666666664], [50.0, 78.8], [52.0, 132.6153846153846], [53.0, 50.7], [55.0, 68.76470588235293], [54.0, 67.92307692307692], [57.0, 51.647058823529406], [56.0, 56.777777777777786], [59.0, 90.07692307692305], [58.0, 47.73076923076924], [60.0, 43.42857142857143], [61.0, 60.46666666666667], [63.0, 86.26666666666667], [62.0, 37.388888888888886], [67.0, 121.72727272727273], [66.0, 55.90909090909092], [65.0, 32.33333333333333], [64.0, 56.25], [70.0, 53.07692307692308], [68.0, 54.083333333333336], [71.0, 43.81818181818183], [69.0, 38.285714285714285], [73.0, 82.07142857142857], [72.0, 49.649999999999984], [74.0, 50.352941176470594], [75.0, 35.4], [79.0, 120.31818181818181], [77.0, 87.68421052631578], [78.0, 46.25], [76.0, 34.11111111111111], [82.0, 72.28571428571428], [81.0, 37.90624999999999], [83.0, 70.23529411764706], [80.0, 40.08], [86.0, 101.53846153846156], [84.0, 76.46666666666668], [87.0, 45.68750000000001], [85.0, 55.55555555555556], [91.0, 47.88235294117648], [90.0, 62.166666666666664], [88.0, 86.00000000000001], [89.0, 61.0], [95.0, 60.20967741935484], [93.0, 38.05555555555556], [92.0, 90.2], [94.0, 61.0], [99.0, 39.68181818181819], [97.0, 67.9090909090909], [96.0, 37.07692307692307], [98.0, 42.04761904761905], [103.0, 46.94117647058823], [102.0, 38.333333333333336], [101.0, 110.88888888888889], [100.0, 52.99999999999999], [107.0, 47.69565217391305], [106.0, 75.5], [104.0, 57.12500000000001], [105.0, 46.66666666666667], [111.0, 52.89999999999999], [110.0, 74.16666666666667], [108.0, 60.54545454545455], [109.0, 53.30769230769231], [114.0, 54.66666666666667], [113.0, 97.74999999999999], [112.0, 54.33333333333333], [115.0, 48.2], [119.0, 112.0], [118.0, 52.2], [117.0, 60.07142857142857], [116.0, 54.333333333333336], [122.0, 94.2], [121.0, 85.22222222222223], [123.0, 83.2], [120.0, 59.50000000000001], [127.0, 88.6], [126.0, 115.91666666666664], [125.0, 92.33333333333333], [124.0, 106.5], [134.0, 135.1818181818182], [132.0, 115.76470588235294], [133.0, 109.94444444444447], [128.0, 211.0], [135.0, 103.6923076923077], [131.0, 75.2], [130.0, 40.0], [129.0, 34.5], [143.0, 193.54545454545453], [141.0, 150.66666666666666], [142.0, 103.0], [139.0, 122.55555555555556], [138.0, 79.375], [137.0, 156.00000000000003], [140.0, 78.55555555555556], [136.0, 55.28571428571429], [151.0, 148.72727272727275], [149.0, 92.8], [150.0, 81.75], [147.0, 202.6], [145.0, 172.54545454545453], [148.0, 134.2], [146.0, 79.57142857142858], [144.0, 49.6], [159.0, 122.73333333333332], [158.0, 111.0], [156.0, 141.25000000000003], [154.0, 169.0909090909091], [153.0, 154.0], [155.0, 140.0], [152.0, 73.42857142857143], [157.0, 128.0], [167.0, 153.84615384615387], [164.0, 105.0], [162.0, 116.85714285714285], [160.0, 129.25], [166.0, 79.44444444444443], [165.0, 95.44444444444444], [161.0, 94.15384615384613], [163.0, 66.68], [175.0, 133.875], [174.0, 126.99999999999999], [171.0, 102.49999999999999], [170.0, 170.75], [169.0, 112.66666666666667], [173.0, 118.4], [168.0, 97.19999999999999], [172.0, 58.50000000000001], [183.0, 139.44444444444446], [181.0, 176.875], [179.0, 118.54545454545455], [178.0, 200.66666666666666], [176.0, 169.06666666666666], [180.0, 107.0], [177.0, 144.0], [182.0, 103.0], [189.0, 689.6249999999999], [188.0, 811.0000000000001], [186.0, 1001.6304347826086], [184.0, 107.17142857142859], [191.0, 258.91666666666663], [185.0, 128.73684210526315], [190.0, 103.92307692307693], [187.0, 914.2765957446809], [199.0, 251.37499999999997], [198.0, 445.5384615384615], [196.0, 178.64285714285717], [195.0, 288.84], [193.0, 142.1818181818182], [194.0, 230.61538461538458], [192.0, 50.0], [197.0, 135.1818181818182], [207.0, 241.25], [206.0, 248.09090909090907], [205.0, 259.14285714285717], [202.0, 246.5555555555556], [201.0, 290.5], [200.0, 167.875], [204.0, 159.07142857142858], [203.0, 119.44444444444444], [213.0, 273.1], [211.0, 220.81818181818178], [210.0, 323.7647058823529], [208.0, 246.26666666666668], [215.0, 139.86666666666667], [214.0, 220.3333333333333], [212.0, 190.23076923076923], [209.0, 113.57142857142857], [223.0, 124.89655172413792], [222.0, 71.88461538461539], [220.0, 108.33333333333333], [218.0, 146.2], [219.0, 151.30769230769232], [217.0, 155.81249999999997], [216.0, 265.0769230769231], [221.0, 147.99999999999997], [229.0, 70.61290322580646], [227.0, 75.82608695652173], [225.0, 120.78723404255322], [224.0, 118.11764705882354], [230.0, 66.81632653061223], [228.0, 67.68292682926831], [226.0, 47.70370370370369], [231.0, 77.46017699115048], [239.0, 132.33333333333334], [236.0, 110.75862068965517], [234.0, 74.67857142857144], [233.0, 124.26829268292684], [232.0, 83.92523364485982], [238.0, 120.00000000000001], [235.0, 135.16666666666669], [237.0, 175.0], [247.0, 147.08333333333331], [245.0, 98.57894736842104], [244.0, 126.4375], [242.0, 110.0909090909091], [240.0, 155.35], [246.0, 139.2272727272727], [243.0, 112.65517241379308], [241.0, 111.41666666666667], [255.0, 132.70588235294116], [254.0, 166.15384615384616], [253.0, 142.44444444444443], [250.0, 154.33333333333337], [249.0, 160.33333333333334], [252.0, 113.3529411764706], [248.0, 125.99999999999999], [251.0, 135.6428571428571], [270.0, 118.71428571428572], [271.0, 124.5], [269.0, 140.46153846153845], [268.0, 138.375], [267.0, 124.0], [266.0, 133.25], [264.0, 147.42857142857142], [265.0, 159.55555555555554], [263.0, 147.57142857142858], [257.0, 121.72222222222221], [256.0, 142.28571428571428], [259.0, 135.33333333333334], [258.0, 108.6], [262.0, 144.09999999999997], [260.0, 151.33333333333337], [261.0, 165.36363636363637], [285.0, 112.89473684210526], [287.0, 93.27272727272727], [286.0, 146.08333333333334], [284.0, 95.07692307692308], [275.0, 96.28571428571429], [273.0, 157.54545454545453], [274.0, 126.83333333333333], [272.0, 138.23529411764707], [283.0, 120.81818181818183], [282.0, 127.21428571428572], [281.0, 109.35714285714286], [280.0, 97.22222222222221], [279.0, 131.18181818181816], [277.0, 103.91666666666667], [278.0, 134.00000000000003], [276.0, 149.5], [291.0, 144.89473684210526], [302.0, 68.0], [300.0, 90.10000000000001], [301.0, 100.76923076923076], [299.0, 90.36363636363636], [298.0, 135.1], [296.0, 117.55172413793105], [303.0, 153.78571428571428], [297.0, 60.6], [295.0, 109.33333333333333], [293.0, 136.11764705882354], [292.0, 105.64285714285714], [294.0, 146.89999999999998], [290.0, 143.1764705882353], [289.0, 84.37499999999999], [288.0, 124.99999999999999], [307.0, 199.57142857142858], [318.0, 71.6], [317.0, 110.28571428571428], [316.0, 122.85714285714285], [315.0, 121.9], [314.0, 114.39999999999999], [313.0, 101.57142857142857], [312.0, 116.33333333333334], [319.0, 56.38372093023256], [311.0, 119.5], [310.0, 130.0], [308.0, 102.75], [309.0, 157.92307692307696], [305.0, 162.58823529411762], [306.0, 93.0], [304.0, 140.91666666666669], [322.0, 137.54545454545453], [334.0, 105.41666666666667], [332.0, 45.5], [323.0, 131.0], [333.0, 117.6153846153846], [330.0, 75.71428571428571], [331.0, 106.50442477876108], [329.0, 127.30000000000001], [328.0, 160.6], [335.0, 95.5897435897436], [326.0, 52.99999999999999], [324.0, 75.4047619047619], [325.0, 81.12195121951218], [321.0, 70.3913043478261], [320.0, 114.64285714285715], [327.0, 249.0], [348.0, 126.0], [350.0, 132.45454545454547], [351.0, 144.06250000000003], [344.0, 144.16666666666669], [349.0, 110.125], [347.0, 136.125], [346.0, 127.26666666666667], [345.0, 131.0], [342.0, 119.6470588235294], [341.0, 117.41666666666667], [340.0, 110.6842105263158], [339.0, 117.33333333333333], [338.0, 122.33333333333333], [337.0, 86.18181818181819], [336.0, 126.625], [343.0, 158.0], [355.0, 121.07692307692307], [367.0, 115.60000000000002], [365.0, 120.14285714285715], [364.0, 84.33333333333334], [366.0, 103.91666666666666], [362.0, 147.11111111111111], [363.0, 142.88888888888889], [361.0, 143.57142857142856], [360.0, 123.0], [359.0, 143.25000000000003], [358.0, 155.85714285714286], [356.0, 128.75], [357.0, 113.7], [354.0, 146.4545454545454], [353.0, 175.66666666666666], [352.0, 137.33333333333334], [370.0, 150.5], [383.0, 144.55555555555554], [382.0, 165.76923076923077], [380.0, 96.66666666666666], [371.0, 182.0], [381.0, 146.57142857142858], [379.0, 155.125], [378.0, 133.05882352941177], [377.0, 171.6], [376.0, 96.83333333333333], [375.0, 131.66666666666666], [374.0, 103.13333333333333], [372.0, 138.33333333333331], [373.0, 162.0], [369.0, 135.0], [368.0, 137.22222222222223], [398.0, 186.35294117647058], [399.0, 138.71428571428572], [392.0, 191.25], [397.0, 161.55555555555554], [396.0, 168.46666666666667], [393.0, 130.0], [390.0, 147.53846153846155], [389.0, 187.28571428571428], [388.0, 146.42857142857144], [385.0, 147.08333333333331], [387.0, 204.2857142857143], [386.0, 157.5], [391.0, 140.6], [384.0, 134.6], [395.0, 79.75], [394.0, 193.46666666666667], [412.0, 148.88888888888889], [410.0, 148.55555555555554], [414.0, 151.00000000000003], [413.0, 203.66666666666666], [409.0, 173.83333333333334], [408.0, 228.1], [415.0, 182.66666666666666], [407.0, 188.83333333333331], [401.0, 133.3], [400.0, 169.66666666666669], [406.0, 147.45454545454547], [405.0, 127.07142857142856], [404.0, 190.25000000000003], [402.0, 142.00000000000006], [403.0, 128.1], [411.0, 172.71428571428572], [418.0, 132.23076923076923], [426.0, 135.72727272727272], [427.0, 199.83333333333334], [425.0, 160.16666666666669], [424.0, 131.42857142857142], [422.0, 181.6], [420.0, 149.0], [421.0, 159.625], [416.0, 179.25], [417.0, 145.0], [423.0, 147.75], [431.0, 180.16666666666666], [430.0, 125.75], [429.0, 236.0], [428.0, 147.66666666666666], [419.0, 184.6], [447.0, 152.75], [443.0, 195.22222222222223], [442.0, 175.2], [441.0, 203.1818181818182], [440.0, 193.41666666666669], [437.0, 176.5], [436.0, 174.25], [432.0, 350.2], [444.0, 208.11111111111111], [446.0, 235.7], [445.0, 227.33333333333334], [435.0, 126.75], [433.0, 178.77777777777777], [434.0, 167.0], [439.0, 201.75], [438.0, 200.44444444444446], [451.0, 192.16666666666669], [461.0, 124.80000000000001], [460.0, 198.45454545454544], [459.0, 172.8], [458.0, 199.0], [463.0, 234.5], [457.0, 204.10000000000002], [456.0, 165.16666666666666], [462.0, 206.0], [454.0, 173.44444444444446], [452.0, 110.58333333333334], [453.0, 238.33333333333334], [450.0, 194.75], [449.0, 196.7142857142857], [448.0, 203.99999999999997], [455.0, 220.6], [476.0, 155.33333333333331], [478.0, 145.9], [479.0, 179.25], [473.0, 172.4], [472.0, 129.62500000000003], [477.0, 137.70000000000002], [474.0, 195.15384615384613], [475.0, 230.0], [471.0, 199.8], [464.0, 158.2857142857143], [470.0, 199.33333333333334], [469.0, 153.66666666666666], [468.0, 207.14285714285714], [465.0, 154.75], [467.0, 173.2], [466.0, 176.42857142857144], [483.0, 176.72727272727272], [488.0, 122.41666666666667], [487.0, 142.66666666666666], [480.0, 175.23076923076923], [482.0, 192.00000000000003], [481.0, 135.33333333333334], [486.0, 151.22222222222223], [484.0, 172.88888888888889], [485.0, 231.2], [490.0, 155.50000000000003], [491.0, 171.41666666666666], [495.0, 193.0909090909091], [494.0, 130.83333333333331], [489.0, 192.625], [493.0, 175.83333333333334], [492.0, 184.0], [510.0, 229.14285714285714], [511.0, 196.54545454545453], [509.0, 194.33333333333334], [508.0, 190.79999999999998], [499.0, 146.0], [497.0, 186.6], [496.0, 194.45454545454544], [498.0, 177.88888888888889], [506.0, 199.14285714285714], [507.0, 169.0], [505.0, 170.0], [504.0, 175.125], [503.0, 189.66666666666666], [501.0, 186.83333333333334], [502.0, 199.8], [500.0, 201.71428571428572], [538.0, 169.7833333333334], [517.0, 136.0], [521.0, 215.5], [520.0, 173.4], [526.0, 159.72727272727275], [525.0, 181.6], [522.0, 164.0], [523.0, 156.0], [524.0, 213.2], [527.0, 198.8], [512.0, 214.0], [514.0, 163.33333333333334], [516.0, 215.22222222222226], [515.0, 219.0], [513.0, 230.1818181818182], [530.0, 156.0], [531.0, 123.64285714285714], [532.0, 189.375], [534.0, 273.3333333333333], [535.0, 141.0], [533.0, 172.25], [536.0, 168.85714285714286], [537.0, 190.87499999999997], [519.0, 210.54545454545453], [518.0, 197.2], [540.0, 190.72727272727272], [539.0, 180.28834355828212], [541.0, 153.60000000000002], [543.0, 144.33333333333334], [542.0, 166.5], [528.0, 186.0], [529.0, 267.0], [575.0, 207.5], [563.0, 142.9375], [568.0, 189.42857142857144], [559.0, 184.42857142857144], [549.0, 186.125], [548.0, 152.0], [547.0, 232.25], [545.0, 160.42857142857142], [546.0, 138.0], [544.0, 150.73076923076923], [551.0, 151.625], [550.0, 197.33333333333334], [558.0, 145.57142857142858], [557.0, 127.83333333333334], [556.0, 165.83333333333334], [555.0, 200.77777777777777], [554.0, 167.66666666666666], [552.0, 180.42857142857144], [553.0, 187.0], [567.0, 150.33333333333334], [566.0, 171.25], [565.0, 181.0], [562.0, 165.14285714285714], [561.0, 144.28571428571428], [564.0, 178.66666666666669], [560.0, 183.6], [574.0, 178.0], [573.0, 204.89999999999998], [570.0, 185.71428571428572], [572.0, 220.80000000000004], [571.0, 156.54545454545456], [569.0, 176.42105263157893], [581.0, 181.1818181818182], [605.0, 154.0526315789474], [589.0, 166.75], [590.0, 148.58333333333331], [576.0, 226.0], [591.0, 202.0], [578.0, 176.5], [577.0, 188.33333333333334], [580.0, 176.33333333333331], [579.0, 197.7], [588.0, 200.44444444444446], [587.0, 188.85714285714286], [586.0, 172.27272727272725], [585.0, 190.60000000000002], [584.0, 194.14285714285714], [595.0, 170.00000000000003], [593.0, 191.875], [594.0, 184.5], [592.0, 184.57142857142858], [596.0, 189.55555555555554], [607.0, 235.49999999999991], [606.0, 190.70000000000002], [604.0, 206.77777777777777], [603.0, 197.75], [602.0, 302.09999999999997], [600.0, 211.71428571428572], [601.0, 197.83333333333334], [583.0, 157.5], [582.0, 246.45454545454544], [599.0, 196.33333333333331], [598.0, 193.27027027027023], [597.0, 211.8], [632.0, 186.30769230769232], [638.0, 219.5], [613.0, 163.8888888888889], [612.0, 185.0], [611.0, 187.3], [610.0, 149.75], [609.0, 187.16666666666669], [608.0, 244.25000000000003], [623.0, 265.3], [615.0, 327.2142857142858], [614.0, 295.00000000000006], [622.0, 557.7142857142858], [620.0, 189.9090909090909], [621.0, 157.9], [619.0, 441.29411764705884], [617.0, 338.22222222222223], [618.0, 192.85714285714286], [616.0, 315.5], [639.0, 207.0], [624.0, 281.7272727272727], [625.0, 292.5], [627.0, 323.7142857142857], [628.0, 153.2], [626.0, 244.76470588235293], [637.0, 581.3333333333333], [636.0, 224.88888888888889], [634.0, 216.125], [635.0, 199.66666666666666], [633.0, 151.7142857142857], [630.0, 174.75], [631.0, 181.28571428571428], [629.0, 167.0], [647.0, 247.33333333333334], [659.0, 1127.5], [670.0, 245.2], [669.0, 250.83333333333334], [668.0, 329.85714285714283], [665.0, 264.2], [664.0, 498.0], [667.0, 453.4], [666.0, 613.6666666666666], [646.0, 266.8571428571429], [645.0, 179.0], [644.0, 272.00000000000006], [643.0, 339.3333333333333], [642.0, 259.0833333333333], [641.0, 230.33333333333334], [640.0, 202.66666666666666], [662.0, 854.8333333333333], [663.0, 466.2], [661.0, 711.0], [660.0, 446.6], [658.0, 352.5454545454545], [656.0, 619.2], [671.0, 245.33333333333334], [655.0, 492.5714285714286], [652.0, 497.0], [654.0, 288.6666666666667], [653.0, 256.5], [651.0, 400.99999999999994], [648.0, 317.0], [650.0, 335.0], [649.0, 350.0], [697.0, 243.33333333333331], [702.0, 247.66666666666666], [703.0, 177.57894736842107], [688.0, 278.6], [691.0, 209.4], [690.0, 316.3333333333333], [692.0, 294.6896551724138], [689.0, 233.0], [701.0, 146.57142857142858], [700.0, 204.59999999999997], [699.0, 298.6], [698.0, 251.6], [696.0, 283.0], [679.0, 209.0], [678.0, 390.5], [677.0, 419.7142857142857], [676.0, 310.6], [675.0, 274.0], [674.0, 447.83333333333337], [673.0, 395.1666666666667], [672.0, 242.16666666666666], [687.0, 239.5], [685.0, 262.0], [686.0, 280.0], [684.0, 311.0], [683.0, 377.99999999999994], [682.0, 257.8888888888889], [680.0, 293.88888888888886], [681.0, 346.5], [694.0, 283.5], [695.0, 287.3333333333333], [693.0, 275.42857142857144], [711.0, 192.46153846153845], [724.0, 187.00000000000003], [720.0, 239.7], [719.0, 193.22222222222223], [717.0, 265.8333333333333], [718.0, 218.28571428571428], [716.0, 235.625], [714.0, 218.25], [715.0, 321.5], [713.0, 246.88888888888889], [712.0, 215.0], [721.0, 277.5], [727.0, 282.54545454545456], [726.0, 256.2], [725.0, 238.45454545454544], [728.0, 190.36842105263156], [730.0, 248.55555555555554], [729.0, 263.6666666666667], [733.0, 256.0], [732.0, 442.0], [731.0, 249.875], [735.0, 333.3333333333333], [734.0, 197.88888888888889], [710.0, 278.6], [709.0, 242.4], [708.0, 253.75], [707.0, 267.57142857142856], [706.0, 253.12499999999997], [704.0, 241.5], [705.0, 319.0], [723.0, 315.49999999999994], [722.0, 232.66666666666669], [761.0, 175.7241379310345], [767.0, 327.25], [756.0, 196.5], [754.0, 210.22222222222223], [755.0, 332.75], [753.0, 231.0], [752.0, 325.66666666666663], [757.0, 209.0], [766.0, 215.16666666666669], [765.0, 454.0], [764.0, 215.33333333333331], [762.0, 203.57142857142856], [763.0, 264.6666666666667], [760.0, 169.0], [743.0, 126.5], [742.0, 127.5], [741.0, 275.69230769230774], [740.0, 259.125], [739.0, 146.0], [738.0, 334.0], [737.0, 245.42857142857142], [736.0, 253.4], [750.0, 247.7], [749.0, 204.83333333333331], [748.0, 187.09090909090907], [747.0, 157.6212121212122], [746.0, 256.0], [744.0, 343.57142857142856], [745.0, 275.0], [751.0, 260.5], [759.0, 278.0], [758.0, 236.0], [793.0, 174.0], [797.0, 170.0], [798.0, 141.25], [799.0, 138.0], [785.0, 180.0], [784.0, 162.0], [796.0, 157.0], [795.0, 180.0], [794.0, 177.5], [782.0, 173.5], [768.0, 220.0], [771.0, 165.0], [770.0, 155.0], [769.0, 172.57142857142856], [773.0, 170.5], [772.0, 160.0], [775.0, 161.0], [774.0, 162.0], [781.0, 169.5], [779.0, 167.33333333333334], [777.0, 166.6], [776.0, 170.5], [791.0, 172.0], [790.0, 174.0], [789.0, 168.0], [787.0, 176.0], [825.0, 132.0], [829.0, 129.8], [831.0, 134.0], [830.0, 129.0], [817.0, 140.0], [816.0, 142.5], [828.0, 124.83333333333333], [827.0, 149.5], [826.0, 128.70000000000002], [815.0, 141.75], [813.0, 144.0], [801.0, 147.5], [800.0, 159.0], [803.0, 162.0], [804.0, 145.0], [802.0, 149.0], [807.0, 147.0], [824.0, 123.0], [806.0, 137.2], [805.0, 151.0], [812.0, 152.25], [811.0, 143.4], [810.0, 151.0], [809.0, 152.0], [808.0, 147.0], [823.0, 123.5], [822.0, 133.5], [821.0, 141.33333333333334], [819.0, 132.4], [820.0, 130.5], [818.0, 132.5], [836.0, 141.0], [839.0, 128.57142857142856], [840.0, 131.0], [842.0, 151.0], [841.0, 135.7], [838.0, 158.0], [837.0, 130.66666666666669], [834.0, 134.2], [835.0, 129.0], [833.0, 132.0], [832.0, 128.5], [1.0, 85.0]], "isOverall": false, "label": "Read User", "isController": false}, {"data": [[339.64340000000067, 153.94369999999955]], "isOverall": false, "label": "Read User-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 842.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 26581.1, "minX": 1.73335842E12, "maxY": 67176.73333333334, "series": [{"data": [[1.73335842E12, 67176.73333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73335842E12, 26581.1]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73335842E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 153.94369999999955, "minX": 1.73335842E12, "maxY": 153.94369999999955, "series": [{"data": [[1.73335842E12, 153.94369999999955]], "isOverall": false, "label": "Read User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73335842E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 150.6028000000002, "minX": 1.73335842E12, "maxY": 150.6028000000002, "series": [{"data": [[1.73335842E12, 150.6028000000002]], "isOverall": false, "label": "Read User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73335842E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2.792099999999974, "minX": 1.73335842E12, "maxY": 2.792099999999974, "series": [{"data": [[1.73335842E12, 2.792099999999974]], "isOverall": false, "label": "Read User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73335842E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.73335842E12, "maxY": 1246.0, "series": [{"data": [[1.73335842E12, 1246.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73335842E12, 2.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73335842E12, 267.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73335842E12, 1178.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73335842E12, 136.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.73335842E12, 297.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73335842E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10.0, "minX": 713.0, "maxY": 174.0, "series": [{"data": [[1389.0, 174.0], [713.0, 10.0], [1918.0, 73.0], [1974.0, 73.0], [2006.0, 152.0], [2000.0, 144.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[713.0, 82.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2006.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 713.0, "maxY": 174.0, "series": [{"data": [[1389.0, 174.0], [713.0, 10.0], [1918.0, 66.0], [1974.0, 73.0], [2006.0, 152.0], [2000.0, 144.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[713.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2006.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.73335842E12, "maxY": 166.66666666666666, "series": [{"data": [[1.73335842E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73335842E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.5666666666666667, "minX": 1.73335842E12, "maxY": 165.1, "series": [{"data": [[1.73335842E12, 165.1]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.73335842E12, 1.5666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73335842E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.5666666666666667, "minX": 1.73335842E12, "maxY": 165.1, "series": [{"data": [[1.73335842E12, 1.5666666666666667]], "isOverall": false, "label": "Read User-failure", "isController": false}, {"data": [[1.73335842E12, 165.1]], "isOverall": false, "label": "Read User-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73335842E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.5666666666666667, "minX": 1.73335842E12, "maxY": 165.1, "series": [{"data": [[1.73335842E12, 165.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.73335842E12, 1.5666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73335842E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

