/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3389.0, "series": [{"data": [[0.0, 1.0], [0.1, 3.0], [0.2, 3.0], [0.3, 3.0], [0.4, 4.0], [0.5, 4.0], [0.6, 4.0], [0.7, 4.0], [0.8, 4.0], [0.9, 4.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 6.0], [1.8, 6.0], [1.9, 6.0], [2.0, 6.0], [2.1, 6.0], [2.2, 6.0], [2.3, 6.0], [2.4, 7.0], [2.5, 7.0], [2.6, 7.0], [2.7, 7.0], [2.8, 7.0], [2.9, 7.0], [3.0, 7.0], [3.1, 7.0], [3.2, 8.0], [3.3, 8.0], [3.4, 8.0], [3.5, 8.0], [3.6, 8.0], [3.7, 8.0], [3.8, 8.0], [3.9, 9.0], [4.0, 9.0], [4.1, 9.0], [4.2, 9.0], [4.3, 9.0], [4.4, 9.0], [4.5, 9.0], [4.6, 9.0], [4.7, 9.0], [4.8, 10.0], [4.9, 10.0], [5.0, 10.0], [5.1, 10.0], [5.2, 10.0], [5.3, 10.0], [5.4, 10.0], [5.5, 10.0], [5.6, 10.0], [5.7, 10.0], [5.8, 11.0], [5.9, 11.0], [6.0, 11.0], [6.1, 11.0], [6.2, 11.0], [6.3, 11.0], [6.4, 11.0], [6.5, 11.0], [6.6, 12.0], [6.7, 12.0], [6.8, 12.0], [6.9, 12.0], [7.0, 12.0], [7.1, 12.0], [7.2, 12.0], [7.3, 12.0], [7.4, 13.0], [7.5, 13.0], [7.6, 13.0], [7.7, 13.0], [7.8, 13.0], [7.9, 13.0], [8.0, 13.0], [8.1, 14.0], [8.2, 14.0], [8.3, 14.0], [8.4, 14.0], [8.5, 14.0], [8.6, 14.0], [8.7, 15.0], [8.8, 15.0], [8.9, 15.0], [9.0, 15.0], [9.1, 16.0], [9.2, 16.0], [9.3, 16.0], [9.4, 16.0], [9.5, 16.0], [9.6, 16.0], [9.7, 16.0], [9.8, 17.0], [9.9, 17.0], [10.0, 17.0], [10.1, 17.0], [10.2, 18.0], [10.3, 18.0], [10.4, 18.0], [10.5, 18.0], [10.6, 19.0], [10.7, 19.0], [10.8, 19.0], [10.9, 19.0], [11.0, 19.0], [11.1, 20.0], [11.2, 20.0], [11.3, 20.0], [11.4, 20.0], [11.5, 20.0], [11.6, 21.0], [11.7, 21.0], [11.8, 21.0], [11.9, 21.0], [12.0, 22.0], [12.1, 22.0], [12.2, 23.0], [12.3, 23.0], [12.4, 23.0], [12.5, 23.0], [12.6, 24.0], [12.7, 24.0], [12.8, 24.0], [12.9, 25.0], [13.0, 25.0], [13.1, 25.0], [13.2, 26.0], [13.3, 26.0], [13.4, 27.0], [13.5, 27.0], [13.6, 28.0], [13.7, 28.0], [13.8, 28.0], [13.9, 28.0], [14.0, 29.0], [14.1, 29.0], [14.2, 29.0], [14.3, 30.0], [14.4, 30.0], [14.5, 31.0], [14.6, 31.0], [14.7, 31.0], [14.8, 32.0], [14.9, 32.0], [15.0, 32.0], [15.1, 33.0], [15.2, 33.0], [15.3, 33.0], [15.4, 34.0], [15.5, 34.0], [15.6, 35.0], [15.7, 35.0], [15.8, 36.0], [15.9, 36.0], [16.0, 36.0], [16.1, 37.0], [16.2, 37.0], [16.3, 37.0], [16.4, 38.0], [16.5, 39.0], [16.6, 40.0], [16.7, 41.0], [16.8, 41.0], [16.9, 42.0], [17.0, 42.0], [17.1, 43.0], [17.2, 43.0], [17.3, 43.0], [17.4, 44.0], [17.5, 44.0], [17.6, 45.0], [17.7, 45.0], [17.8, 46.0], [17.9, 46.0], [18.0, 47.0], [18.1, 48.0], [18.2, 48.0], [18.3, 49.0], [18.4, 49.0], [18.5, 50.0], [18.6, 50.0], [18.7, 51.0], [18.8, 51.0], [18.9, 52.0], [19.0, 52.0], [19.1, 53.0], [19.2, 53.0], [19.3, 53.0], [19.4, 54.0], [19.5, 54.0], [19.6, 55.0], [19.7, 55.0], [19.8, 55.0], [19.9, 56.0], [20.0, 56.0], [20.1, 56.0], [20.2, 56.0], [20.3, 57.0], [20.4, 57.0], [20.5, 57.0], [20.6, 57.0], [20.7, 58.0], [20.8, 58.0], [20.9, 58.0], [21.0, 58.0], [21.1, 58.0], [21.2, 59.0], [21.3, 59.0], [21.4, 60.0], [21.5, 60.0], [21.6, 60.0], [21.7, 60.0], [21.8, 61.0], [21.9, 61.0], [22.0, 61.0], [22.1, 62.0], [22.2, 62.0], [22.3, 63.0], [22.4, 63.0], [22.5, 63.0], [22.6, 63.0], [22.7, 64.0], [22.8, 64.0], [22.9, 65.0], [23.0, 65.0], [23.1, 65.0], [23.2, 65.0], [23.3, 66.0], [23.4, 66.0], [23.5, 66.0], [23.6, 67.0], [23.7, 67.0], [23.8, 67.0], [23.9, 68.0], [24.0, 68.0], [24.1, 68.0], [24.2, 68.0], [24.3, 69.0], [24.4, 69.0], [24.5, 69.0], [24.6, 69.0], [24.7, 69.0], [24.8, 70.0], [24.9, 70.0], [25.0, 70.0], [25.1, 70.0], [25.2, 70.0], [25.3, 71.0], [25.4, 71.0], [25.5, 71.0], [25.6, 72.0], [25.7, 72.0], [25.8, 72.0], [25.9, 72.0], [26.0, 73.0], [26.1, 73.0], [26.2, 73.0], [26.3, 73.0], [26.4, 74.0], [26.5, 74.0], [26.6, 74.0], [26.7, 74.0], [26.8, 75.0], [26.9, 75.0], [27.0, 75.0], [27.1, 75.0], [27.2, 76.0], [27.3, 76.0], [27.4, 76.0], [27.5, 76.0], [27.6, 76.0], [27.7, 77.0], [27.8, 77.0], [27.9, 77.0], [28.0, 77.0], [28.1, 77.0], [28.2, 78.0], [28.3, 78.0], [28.4, 78.0], [28.5, 79.0], [28.6, 79.0], [28.7, 79.0], [28.8, 79.0], [28.9, 80.0], [29.0, 80.0], [29.1, 80.0], [29.2, 80.0], [29.3, 80.0], [29.4, 81.0], [29.5, 81.0], [29.6, 81.0], [29.7, 82.0], [29.8, 82.0], [29.9, 82.0], [30.0, 83.0], [30.1, 83.0], [30.2, 83.0], [30.3, 83.0], [30.4, 84.0], [30.5, 84.0], [30.6, 84.0], [30.7, 85.0], [30.8, 85.0], [30.9, 85.0], [31.0, 86.0], [31.1, 86.0], [31.2, 87.0], [31.3, 87.0], [31.4, 87.0], [31.5, 88.0], [31.6, 88.0], [31.7, 88.0], [31.8, 88.0], [31.9, 89.0], [32.0, 89.0], [32.1, 89.0], [32.2, 89.0], [32.3, 90.0], [32.4, 90.0], [32.5, 90.0], [32.6, 91.0], [32.7, 91.0], [32.8, 91.0], [32.9, 91.0], [33.0, 91.0], [33.1, 92.0], [33.2, 92.0], [33.3, 93.0], [33.4, 93.0], [33.5, 93.0], [33.6, 94.0], [33.7, 94.0], [33.8, 94.0], [33.9, 95.0], [34.0, 95.0], [34.1, 95.0], [34.2, 95.0], [34.3, 96.0], [34.4, 96.0], [34.5, 96.0], [34.6, 96.0], [34.7, 97.0], [34.8, 97.0], [34.9, 97.0], [35.0, 97.0], [35.1, 98.0], [35.2, 98.0], [35.3, 98.0], [35.4, 98.0], [35.5, 99.0], [35.6, 99.0], [35.7, 99.0], [35.8, 99.0], [35.9, 99.0], [36.0, 99.0], [36.1, 100.0], [36.2, 100.0], [36.3, 100.0], [36.4, 100.0], [36.5, 101.0], [36.6, 101.0], [36.7, 101.0], [36.8, 101.0], [36.9, 102.0], [37.0, 102.0], [37.1, 102.0], [37.2, 102.0], [37.3, 103.0], [37.4, 103.0], [37.5, 103.0], [37.6, 103.0], [37.7, 103.0], [37.8, 103.0], [37.9, 104.0], [38.0, 104.0], [38.1, 104.0], [38.2, 104.0], [38.3, 104.0], [38.4, 105.0], [38.5, 105.0], [38.6, 105.0], [38.7, 106.0], [38.8, 106.0], [38.9, 106.0], [39.0, 106.0], [39.1, 107.0], [39.2, 107.0], [39.3, 107.0], [39.4, 107.0], [39.5, 107.0], [39.6, 107.0], [39.7, 108.0], [39.8, 108.0], [39.9, 108.0], [40.0, 108.0], [40.1, 108.0], [40.2, 109.0], [40.3, 109.0], [40.4, 109.0], [40.5, 110.0], [40.6, 110.0], [40.7, 110.0], [40.8, 110.0], [40.9, 110.0], [41.0, 111.0], [41.1, 111.0], [41.2, 111.0], [41.3, 111.0], [41.4, 112.0], [41.5, 112.0], [41.6, 112.0], [41.7, 112.0], [41.8, 112.0], [41.9, 113.0], [42.0, 113.0], [42.1, 113.0], [42.2, 113.0], [42.3, 113.0], [42.4, 114.0], [42.5, 114.0], [42.6, 114.0], [42.7, 114.0], [42.8, 114.0], [42.9, 115.0], [43.0, 115.0], [43.1, 115.0], [43.2, 115.0], [43.3, 116.0], [43.4, 116.0], [43.5, 116.0], [43.6, 116.0], [43.7, 117.0], [43.8, 117.0], [43.9, 117.0], [44.0, 117.0], [44.1, 118.0], [44.2, 118.0], [44.3, 118.0], [44.4, 118.0], [44.5, 118.0], [44.6, 119.0], [44.7, 119.0], [44.8, 119.0], [44.9, 119.0], [45.0, 119.0], [45.1, 120.0], [45.2, 120.0], [45.3, 120.0], [45.4, 120.0], [45.5, 120.0], [45.6, 120.0], [45.7, 121.0], [45.8, 121.0], [45.9, 121.0], [46.0, 121.0], [46.1, 122.0], [46.2, 122.0], [46.3, 122.0], [46.4, 122.0], [46.5, 122.0], [46.6, 123.0], [46.7, 123.0], [46.8, 123.0], [46.9, 124.0], [47.0, 124.0], [47.1, 124.0], [47.2, 124.0], [47.3, 125.0], [47.4, 125.0], [47.5, 125.0], [47.6, 125.0], [47.7, 126.0], [47.8, 126.0], [47.9, 126.0], [48.0, 126.0], [48.1, 126.0], [48.2, 127.0], [48.3, 127.0], [48.4, 127.0], [48.5, 128.0], [48.6, 128.0], [48.7, 128.0], [48.8, 128.0], [48.9, 129.0], [49.0, 129.0], [49.1, 129.0], [49.2, 130.0], [49.3, 130.0], [49.4, 130.0], [49.5, 131.0], [49.6, 131.0], [49.7, 131.0], [49.8, 131.0], [49.9, 132.0], [50.0, 132.0], [50.1, 132.0], [50.2, 133.0], [50.3, 133.0], [50.4, 133.0], [50.5, 134.0], [50.6, 134.0], [50.7, 135.0], [50.8, 135.0], [50.9, 135.0], [51.0, 136.0], [51.1, 136.0], [51.2, 136.0], [51.3, 137.0], [51.4, 137.0], [51.5, 137.0], [51.6, 138.0], [51.7, 138.0], [51.8, 138.0], [51.9, 139.0], [52.0, 139.0], [52.1, 139.0], [52.2, 139.0], [52.3, 140.0], [52.4, 140.0], [52.5, 140.0], [52.6, 141.0], [52.7, 141.0], [52.8, 141.0], [52.9, 142.0], [53.0, 142.0], [53.1, 143.0], [53.2, 143.0], [53.3, 143.0], [53.4, 144.0], [53.5, 144.0], [53.6, 145.0], [53.7, 145.0], [53.8, 146.0], [53.9, 146.0], [54.0, 146.0], [54.1, 147.0], [54.2, 147.0], [54.3, 148.0], [54.4, 148.0], [54.5, 149.0], [54.6, 149.0], [54.7, 149.0], [54.8, 150.0], [54.9, 150.0], [55.0, 150.0], [55.1, 151.0], [55.2, 151.0], [55.3, 151.0], [55.4, 152.0], [55.5, 152.0], [55.6, 152.0], [55.7, 152.0], [55.8, 153.0], [55.9, 153.0], [56.0, 153.0], [56.1, 153.0], [56.2, 154.0], [56.3, 154.0], [56.4, 154.0], [56.5, 154.0], [56.6, 155.0], [56.7, 155.0], [56.8, 155.0], [56.9, 155.0], [57.0, 156.0], [57.1, 156.0], [57.2, 156.0], [57.3, 157.0], [57.4, 158.0], [57.5, 158.0], [57.6, 158.0], [57.7, 159.0], [57.8, 159.0], [57.9, 160.0], [58.0, 160.0], [58.1, 160.0], [58.2, 161.0], [58.3, 161.0], [58.4, 161.0], [58.5, 162.0], [58.6, 162.0], [58.7, 163.0], [58.8, 163.0], [58.9, 164.0], [59.0, 164.0], [59.1, 165.0], [59.2, 165.0], [59.3, 165.0], [59.4, 166.0], [59.5, 166.0], [59.6, 167.0], [59.7, 168.0], [59.8, 168.0], [59.9, 169.0], [60.0, 170.0], [60.1, 171.0], [60.2, 172.0], [60.3, 173.0], [60.4, 173.0], [60.5, 174.0], [60.6, 174.0], [60.7, 175.0], [60.8, 175.0], [60.9, 176.0], [61.0, 176.0], [61.1, 177.0], [61.2, 177.0], [61.3, 178.0], [61.4, 178.0], [61.5, 179.0], [61.6, 179.0], [61.7, 180.0], [61.8, 180.0], [61.9, 181.0], [62.0, 182.0], [62.1, 183.0], [62.2, 183.0], [62.3, 184.0], [62.4, 184.0], [62.5, 185.0], [62.6, 185.0], [62.7, 186.0], [62.8, 186.0], [62.9, 187.0], [63.0, 187.0], [63.1, 188.0], [63.2, 188.0], [63.3, 188.0], [63.4, 189.0], [63.5, 189.0], [63.6, 190.0], [63.7, 190.0], [63.8, 191.0], [63.9, 191.0], [64.0, 191.0], [64.1, 191.0], [64.2, 192.0], [64.3, 192.0], [64.4, 193.0], [64.5, 193.0], [64.6, 193.0], [64.7, 193.0], [64.8, 194.0], [64.9, 194.0], [65.0, 194.0], [65.1, 195.0], [65.2, 195.0], [65.3, 195.0], [65.4, 196.0], [65.5, 196.0], [65.6, 196.0], [65.7, 197.0], [65.8, 197.0], [65.9, 197.0], [66.0, 198.0], [66.1, 198.0], [66.2, 199.0], [66.3, 199.0], [66.4, 200.0], [66.5, 200.0], [66.6, 200.0], [66.7, 201.0], [66.8, 201.0], [66.9, 202.0], [67.0, 202.0], [67.1, 202.0], [67.2, 202.0], [67.3, 203.0], [67.4, 203.0], [67.5, 204.0], [67.6, 204.0], [67.7, 205.0], [67.8, 205.0], [67.9, 206.0], [68.0, 206.0], [68.1, 207.0], [68.2, 207.0], [68.3, 208.0], [68.4, 208.0], [68.5, 208.0], [68.6, 209.0], [68.7, 209.0], [68.8, 210.0], [68.9, 210.0], [69.0, 211.0], [69.1, 211.0], [69.2, 212.0], [69.3, 212.0], [69.4, 212.0], [69.5, 213.0], [69.6, 213.0], [69.7, 214.0], [69.8, 214.0], [69.9, 215.0], [70.0, 215.0], [70.1, 216.0], [70.2, 216.0], [70.3, 217.0], [70.4, 218.0], [70.5, 219.0], [70.6, 220.0], [70.7, 221.0], [70.8, 222.0], [70.9, 223.0], [71.0, 223.0], [71.1, 224.0], [71.2, 225.0], [71.3, 227.0], [71.4, 229.0], [71.5, 232.0], [71.6, 233.0], [71.7, 235.0], [71.8, 236.0], [71.9, 238.0], [72.0, 239.0], [72.1, 239.0], [72.2, 240.0], [72.3, 241.0], [72.4, 241.0], [72.5, 242.0], [72.6, 242.0], [72.7, 243.0], [72.8, 244.0], [72.9, 244.0], [73.0, 245.0], [73.1, 246.0], [73.2, 246.0], [73.3, 247.0], [73.4, 248.0], [73.5, 248.0], [73.6, 249.0], [73.7, 249.0], [73.8, 250.0], [73.9, 250.0], [74.0, 251.0], [74.1, 251.0], [74.2, 253.0], [74.3, 253.0], [74.4, 253.0], [74.5, 254.0], [74.6, 254.0], [74.7, 255.0], [74.8, 255.0], [74.9, 255.0], [75.0, 256.0], [75.1, 256.0], [75.2, 257.0], [75.3, 257.0], [75.4, 258.0], [75.5, 258.0], [75.6, 259.0], [75.7, 260.0], [75.8, 260.0], [75.9, 261.0], [76.0, 261.0], [76.1, 261.0], [76.2, 262.0], [76.3, 262.0], [76.4, 263.0], [76.5, 263.0], [76.6, 263.0], [76.7, 264.0], [76.8, 264.0], [76.9, 265.0], [77.0, 266.0], [77.1, 266.0], [77.2, 267.0], [77.3, 267.0], [77.4, 268.0], [77.5, 268.0], [77.6, 269.0], [77.7, 270.0], [77.8, 271.0], [77.9, 272.0], [78.0, 273.0], [78.1, 273.0], [78.2, 274.0], [78.3, 275.0], [78.4, 276.0], [78.5, 276.0], [78.6, 277.0], [78.7, 278.0], [78.8, 279.0], [78.9, 280.0], [79.0, 280.0], [79.1, 281.0], [79.2, 282.0], [79.3, 282.0], [79.4, 283.0], [79.5, 284.0], [79.6, 284.0], [79.7, 285.0], [79.8, 286.0], [79.9, 286.0], [80.0, 287.0], [80.1, 287.0], [80.2, 288.0], [80.3, 289.0], [80.4, 289.0], [80.5, 290.0], [80.6, 291.0], [80.7, 292.0], [80.8, 293.0], [80.9, 293.0], [81.0, 294.0], [81.1, 295.0], [81.2, 296.0], [81.3, 296.0], [81.4, 297.0], [81.5, 298.0], [81.6, 299.0], [81.7, 300.0], [81.8, 301.0], [81.9, 302.0], [82.0, 303.0], [82.1, 304.0], [82.2, 305.0], [82.3, 305.0], [82.4, 306.0], [82.5, 306.0], [82.6, 308.0], [82.7, 309.0], [82.8, 309.0], [82.9, 310.0], [83.0, 312.0], [83.1, 314.0], [83.2, 318.0], [83.3, 322.0], [83.4, 328.0], [83.5, 331.0], [83.6, 333.0], [83.7, 337.0], [83.8, 340.0], [83.9, 352.0], [84.0, 367.0], [84.1, 376.0], [84.2, 381.0], [84.3, 387.0], [84.4, 396.0], [84.5, 399.0], [84.6, 404.0], [84.7, 410.0], [84.8, 417.0], [84.9, 422.0], [85.0, 428.0], [85.1, 432.0], [85.2, 437.0], [85.3, 457.0], [85.4, 472.0], [85.5, 477.0], [85.6, 483.0], [85.7, 488.0], [85.8, 492.0], [85.9, 497.0], [86.0, 500.0], [86.1, 506.0], [86.2, 509.0], [86.3, 514.0], [86.4, 517.0], [86.5, 521.0], [86.6, 525.0], [86.7, 530.0], [86.8, 539.0], [86.9, 543.0], [87.0, 557.0], [87.1, 568.0], [87.2, 572.0], [87.3, 578.0], [87.4, 592.0], [87.5, 609.0], [87.6, 618.0], [87.7, 631.0], [87.8, 643.0], [87.9, 659.0], [88.0, 676.0], [88.1, 687.0], [88.2, 690.0], [88.3, 692.0], [88.4, 702.0], [88.5, 710.0], [88.6, 719.0], [88.7, 734.0], [88.8, 777.0], [88.9, 813.0], [89.0, 1034.0], [89.1, 1077.0], [89.2, 1092.0], [89.3, 1097.0], [89.4, 1103.0], [89.5, 1110.0], [89.6, 1116.0], [89.7, 1117.0], [89.8, 1120.0], [89.9, 1121.0], [90.0, 1122.0], [90.1, 1124.0], [90.2, 1126.0], [90.3, 1129.0], [90.4, 1131.0], [90.5, 1134.0], [90.6, 1138.0], [90.7, 1141.0], [90.8, 1143.0], [90.9, 1145.0], [91.0, 1148.0], [91.1, 1150.0], [91.2, 1153.0], [91.3, 1155.0], [91.4, 1157.0], [91.5, 1160.0], [91.6, 1163.0], [91.7, 1165.0], [91.8, 1168.0], [91.9, 1170.0], [92.0, 1174.0], [92.1, 1178.0], [92.2, 1180.0], [92.3, 1181.0], [92.4, 1182.0], [92.5, 1184.0], [92.6, 1186.0], [92.7, 1188.0], [92.8, 1189.0], [92.9, 1191.0], [93.0, 1192.0], [93.1, 1193.0], [93.2, 1194.0], [93.3, 1195.0], [93.4, 1196.0], [93.5, 1197.0], [93.6, 1198.0], [93.7, 1200.0], [93.8, 1202.0], [93.9, 1207.0], [94.0, 1213.0], [94.1, 1215.0], [94.2, 1217.0], [94.3, 1218.0], [94.4, 1220.0], [94.5, 1221.0], [94.6, 1223.0], [94.7, 1224.0], [94.8, 1226.0], [94.9, 1230.0], [95.0, 1232.0], [95.1, 1235.0], [95.2, 1239.0], [95.3, 1243.0], [95.4, 1244.0], [95.5, 1246.0], [95.6, 1248.0], [95.7, 1251.0], [95.8, 1254.0], [95.9, 1257.0], [96.0, 1260.0], [96.1, 1263.0], [96.2, 1264.0], [96.3, 1265.0], [96.4, 1266.0], [96.5, 1266.0], [96.6, 1267.0], [96.7, 1268.0], [96.8, 1269.0], [96.9, 1269.0], [97.0, 1270.0], [97.1, 1271.0], [97.2, 1271.0], [97.3, 1273.0], [97.4, 1276.0], [97.5, 1279.0], [97.6, 1282.0], [97.7, 1287.0], [97.8, 1290.0], [97.9, 1293.0], [98.0, 1300.0], [98.1, 1305.0], [98.2, 1310.0], [98.3, 1313.0], [98.4, 1327.0], [98.5, 1342.0], [98.6, 1406.0], [98.7, 1416.0], [98.8, 1448.0], [98.9, 1681.0], [99.0, 1774.0], [99.1, 2152.0], [99.2, 2155.0], [99.3, 2159.0], [99.4, 2169.0], [99.5, 3318.0], [99.6, 3367.0], [99.7, 3370.0], [99.8, 3377.0], [99.9, 3380.0], [100.0, 3389.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3603.0, "series": [{"data": [[0.0, 3603.0], [2100.0, 48.0], [600.0, 90.0], [700.0, 50.0], [200.0, 1522.0], [800.0, 11.0], [3300.0, 51.0], [900.0, 3.0], [1000.0, 35.0], [1100.0, 434.0], [1200.0, 431.0], [300.0, 289.0], [1300.0, 59.0], [1400.0, 22.0], [1500.0, 7.0], [100.0, 3037.0], [400.0, 145.0], [1600.0, 6.0], [1700.0, 7.0], [1900.0, 1.0], [500.0, 149.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 120.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7640.0, "series": [{"data": [[0.0, 7640.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1279.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 120.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 961.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 460.8747999999997, "minX": 1.73335644E12, "maxY": 460.8747999999997, "series": [{"data": [[1.73335644E12, 460.8747999999997]], "isOverall": false, "label": "Test Distributed Messenger", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73335644E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.0, "minX": 6.0, "maxY": 3379.5, "series": [{"data": [[6.0, 1282.5], [7.0, 1289.0], [9.0, 1291.0], [10.0, 1282.0], [14.0, 1284.5], [15.0, 1275.0], [18.0, 1282.0], [20.0, 1275.0], [22.0, 1279.0], [23.0, 1279.0], [25.0, 1282.0], [27.0, 1268.0], [28.0, 1269.0], [29.0, 1270.0], [30.0, 1264.0], [31.0, 1266.0], [33.0, 1271.5], [35.0, 1269.0], [34.0, 1272.0], [36.0, 1263.0], [39.0, 1269.0], [38.0, 1269.0], [41.0, 1265.0], [43.0, 1263.0], [42.0, 1269.0], [45.0, 1270.0], [44.0, 1268.0], [47.0, 1267.0], [48.0, 1266.0], [51.0, 1271.0], [50.0, 1263.0], [53.0, 1270.5], [55.0, 1567.3333333333333], [57.0, 1717.0], [56.0, 1258.0], [58.0, 656.5], [59.0, 1274.5], [60.0, 1261.0], [63.0, 1268.0], [62.0, 1269.5], [65.0, 1264.0], [73.0, 1216.0], [79.0, 1197.0], [78.0, 1233.0], [77.0, 1228.0], [76.0, 1249.0], [83.0, 1227.2222222222224], [81.0, 1249.3333333333333], [87.0, 2180.0], [84.0, 1243.0], [96.0, 29.0], [99.0, 1194.0], [98.0, 1196.0], [102.0, 809.3333333333334], [103.0, 1194.0], [101.0, 1190.0], [100.0, 1193.6666666666667], [106.0, 1195.0], [105.0, 1190.5], [109.0, 57.0], [110.0, 1192.5], [108.0, 1194.5], [115.0, 1193.0], [113.0, 1197.0], [112.0, 1195.0], [119.0, 1194.5], [117.0, 1197.0], [116.0, 1193.0], [123.0, 1920.0], [122.0, 2154.0], [121.0, 1194.0], [127.0, 7.0], [126.0, 597.75], [125.0, 3379.5], [124.0, 2284.0], [134.0, 305.25], [130.0, 1481.8333333333335], [129.0, 302.25], [128.0, 1337.0], [135.0, 896.2727272727273], [133.0, 1673.5], [131.0, 2156.0], [132.0, 1191.3333333333333], [143.0, 583.8], [139.0, 567.5], [142.0, 766.3684210526316], [141.0, 1066.6470588235295], [140.0, 117.27272727272728], [138.0, 374.6], [137.0, 1002.5833333333334], [136.0, 343.0], [145.0, 1141.9999999999998], [144.0, 1276.6], [149.0, 539.6842105263157], [148.0, 403.0], [151.0, 1139.0], [150.0, 1130.4166666666667], [147.0, 605.0], [146.0, 2486.6], [159.0, 633.2222222222222], [157.0, 391.0], [156.0, 1108.4285714285713], [155.0, 897.2], [158.0, 1498.6666666666667], [154.0, 1103.8], [152.0, 2306.1875], [153.0, 3369.0], [167.0, 20.0], [166.0, 1776.4], [165.0, 848.5], [162.0, 1700.0], [161.0, 1098.6666666666667], [160.0, 300.25], [164.0, 2244.0], [163.0, 2154.0], [175.0, 7.5], [174.0, 369.3333333333333], [172.0, 21.0], [171.0, 27.0], [170.0, 20.0], [168.0, 22.0], [173.0, 23.0], [179.0, 370.8888888888889], [180.0, 100.0], [178.0, 12.2], [177.0, 9.8], [181.0, 262.0], [176.0, 387.77777777777777], [183.0, 136.66666666666669], [182.0, 23.6], [191.0, 16.31578947368421], [190.0, 16.53125], [189.0, 15.290322580645164], [187.0, 166.66666666666666], [186.0, 81.42857142857143], [185.0, 22.285714285714285], [184.0, 21.166666666666668], [188.0, 21.249999999999996], [198.0, 20.0], [197.0, 27.35294117647059], [196.0, 29.22222222222223], [199.0, 29.071428571428573], [195.0, 37.480000000000004], [194.0, 23.190476190476186], [193.0, 42.903225806451616], [192.0, 25.83333333333334], [205.0, 31.4], [204.0, 28.9], [203.0, 31.730769230769234], [207.0, 16.625], [206.0, 29.263157894736842], [202.0, 15.47058823529412], [200.0, 24.666666666666664], [201.0, 24.8], [213.0, 604.5], [212.0, 242.8235294117647], [210.0, 388.7037037037037], [211.0, 320.3636363636364], [209.0, 20.4], [214.0, 429.7222222222223], [208.0, 85.47368421052632], [215.0, 455.0], [222.0, 317.1111111111111], [218.0, 157.5], [216.0, 145.33333333333334], [217.0, 178.58333333333331], [223.0, 258.1818181818182], [220.0, 251.91666666666669], [219.0, 457.1666666666667], [221.0, 404.0], [228.0, 181.83333333333334], [227.0, 25.25], [231.0, 756.0], [229.0, 601.2222222222222], [226.0, 421.0], [224.0, 416.5], [230.0, 729.8571428571429], [225.0, 411.625], [234.0, 121.2], [239.0, 85.6], [238.0, 315.6666666666667], [237.0, 300.27272727272725], [236.0, 162.625], [235.0, 472.25], [233.0, 471.16666666666663], [232.0, 236.85714285714283], [246.0, 356.25], [240.0, 309.2352941176471], [241.0, 46.9], [244.0, 189.0], [245.0, 415.0], [243.0, 44.5], [247.0, 597.5], [242.0, 176.5], [255.0, 292.0], [253.0, 428.22222222222223], [249.0, 242.75], [254.0, 200.875], [252.0, 57.42857142857143], [251.0, 56.8], [250.0, 698.6], [248.0, 197.625], [269.0, 306.875], [271.0, 328.75], [270.0, 63.285714285714285], [268.0, 77.5], [267.0, 240.5], [266.0, 220.92307692307693], [264.0, 308.8888888888889], [265.0, 419.0], [262.0, 56.4], [260.0, 314.25], [261.0, 349.5], [259.0, 188.9090909090909], [258.0, 243.5], [257.0, 290.6], [263.0, 84.0], [256.0, 258.1428571428571], [275.0, 284.4], [286.0, 81.45454545454544], [285.0, 223.29999999999998], [284.0, 86.66666666666667], [283.0, 102.0], [282.0, 81.66666666666667], [281.0, 97.66666666666666], [280.0, 159.58823529411765], [287.0, 97.2], [279.0, 163.83333333333334], [278.0, 386.27272727272725], [277.0, 100.07142857142858], [276.0, 300.44444444444446], [274.0, 85.28571428571429], [273.0, 72.33333333333333], [272.0, 198.875], [291.0, 425.81818181818187], [303.0, 195.14285714285714], [302.0, 250.63636363636365], [300.0, 173.33333333333331], [301.0, 467.0], [299.0, 411.8888888888889], [298.0, 250.4375], [296.0, 401.45454545454544], [297.0, 125.0], [294.0, 325.43749999999994], [293.0, 277.59999999999997], [292.0, 151.2], [290.0, 343.6666666666667], [289.0, 255.71428571428572], [288.0, 631.4285714285714], [295.0, 214.66666666666666], [307.0, 126.8], [318.0, 385.9], [319.0, 255.71428571428572], [312.0, 252.85714285714286], [317.0, 127.75], [316.0, 425.6666666666667], [313.0, 223.28571428571428], [315.0, 217.6], [314.0, 519.6666666666666], [311.0, 479.83333333333337], [310.0, 199.85714285714286], [309.0, 351.8], [308.0, 127.07142857142857], [306.0, 189.11764705882354], [305.0, 305.1111111111111], [304.0, 459.66666666666663], [334.0, 231.08333333333331], [335.0, 150.44444444444446], [333.0, 224.07692307692307], [332.0, 191.125], [331.0, 388.375], [330.0, 106.71428571428571], [328.0, 196.91666666666666], [329.0, 250.4615384615385], [327.0, 101.75], [321.0, 240.28571428571428], [320.0, 423.2], [323.0, 275.25], [322.0, 114.33333333333333], [326.0, 307.0], [324.0, 270.5], [325.0, 97.71875000000001], [350.0, 271.44444444444446], [347.0, 459.0769230769231], [349.0, 169.42857142857147], [348.0, 80.58333333333333], [346.0, 205.60000000000002], [345.0, 257.5882352941176], [344.0, 192.16666666666666], [351.0, 235.66666666666663], [343.0, 154.75], [339.0, 292.6363636363637], [338.0, 117.06666666666669], [337.0, 162.16666666666669], [336.0, 148.58823529411768], [342.0, 298.07692307692304], [341.0, 227.91666666666666], [340.0, 347.75000000000006], [354.0, 136.93333333333334], [367.0, 156.84563758389262], [363.0, 165.47272727272727], [362.0, 324.09999999999997], [361.0, 86.75], [360.0, 253.41666666666666], [358.0, 202.91666666666666], [359.0, 481.25], [355.0, 77.49999999999999], [364.0, 138.39999999999992], [366.0, 100.06249999999999], [365.0, 125.9375], [352.0, 162.1428571428571], [353.0, 134.79999999999998], [357.0, 111.00000000000001], [356.0, 231.72727272727275], [369.0, 198.71428571428572], [373.0, 125.5], [372.0, 211.86206896551718], [371.0, 180.81250000000003], [370.0, 174.52941176470586], [375.0, 172.47368421052633], [368.0, 111.20000000000002], [374.0, 102.9], [383.0, 204.57142857142858], [382.0, 45.45454545454545], [376.0, 199.3636363636364], [377.0, 119.66666666666667], [379.0, 436.57142857142856], [378.0, 120.72727272727272], [381.0, 306.2], [380.0, 118.00000000000001], [396.0, 181.875], [395.0, 149.125], [391.0, 159.00000000000003], [384.0, 100.1], [386.0, 308.6153846153845], [387.0, 91.11111111111111], [385.0, 139.625], [399.0, 123.44000000000003], [397.0, 335.99999999999994], [398.0, 330.625], [394.0, 127.57142857142858], [392.0, 275.7272727272728], [393.0, 73.0], [389.0, 190.84615384615384], [388.0, 221.40740740740742], [390.0, 294.82608695652175], [415.0, 390.10526315789485], [413.0, 317.09999999999997], [414.0, 194.55555555555551], [411.0, 281.25], [410.0, 257.0425531914892], [409.0, 274.4545454545455], [408.0, 283.1363636363637], [404.0, 384.0], [405.0, 273.72], [406.0, 240.66666666666666], [400.0, 201.63636363636365], [407.0, 178.2857142857143], [401.0, 335.26315789473676], [412.0, 346.83333333333337], [403.0, 140.78048780487805], [402.0, 280.40000000000003], [430.0, 213.00000000000003], [431.0, 156.33333333333331], [429.0, 262.9166666666667], [428.0, 173.54999999999998], [427.0, 258.6129032258064], [426.0, 274.77272727272725], [424.0, 179.29629629629628], [425.0, 224.80952380952382], [422.0, 220.80952380952382], [420.0, 201.96296296296302], [421.0, 247.38888888888894], [419.0, 140.075], [418.0, 296.48275862068965], [417.0, 136.3846153846154], [416.0, 190.4761904761905], [423.0, 147.62499999999997], [446.0, 265.1], [447.0, 132.55555555555557], [445.0, 180.8421052631579], [444.0, 103.4074074074074], [443.0, 173.57894736842104], [442.0, 283.27272727272725], [440.0, 170.31578947368422], [441.0, 230.47368421052633], [437.0, 132.99999999999997], [436.0, 144.0909090909091], [435.0, 168.71428571428572], [433.0, 191.6153846153846], [432.0, 199.6153846153846], [434.0, 109.07692307692307], [439.0, 235.22222222222226], [438.0, 167.89473684210526], [461.0, 271.55], [462.0, 265.66666666666663], [463.0, 147.08333333333334], [460.0, 151.57142857142858], [459.0, 364.46666666666664], [458.0, 196.5217391304348], [457.0, 264.8305084745762], [456.0, 171.07692307692307], [453.0, 306.85714285714283], [452.0, 150.55555555555554], [454.0, 274.3500000000001], [455.0, 205.4615384615385], [449.0, 244.9090909090909], [450.0, 197.61538461538458], [448.0, 158.13333333333335], [451.0, 250.04166666666666], [478.0, 248.2], [469.0, 223.28571428571428], [468.0, 381.2105263157894], [471.0, 226.86206896551718], [467.0, 260.9166666666666], [466.0, 333.00000000000006], [465.0, 321.0], [464.0, 275.74999999999994], [470.0, 229.962962962963], [479.0, 299.94444444444446], [477.0, 320.8571428571429], [476.0, 269.96296296296293], [475.0, 298.85714285714283], [474.0, 182.26923076923075], [473.0, 105.9714285714286], [472.0, 402.9333333333334], [494.0, 310.9285714285714], [495.0, 203.8823529411765], [493.0, 204.83333333333334], [492.0, 289.2105263157894], [491.0, 401.0833333333333], [490.0, 392.5238095238095], [489.0, 246.83333333333334], [488.0, 219.8888888888889], [487.0, 533.9444444444445], [481.0, 237.0769230769231], [480.0, 269.2352941176472], [483.0, 350.75000000000006], [482.0, 212.68181818181813], [486.0, 323.71428571428567], [485.0, 299.5], [484.0, 314.57142857142856], [510.0, 349.5], [511.0, 337.5625], [508.0, 254.52380952380958], [509.0, 326.7272727272727], [499.0, 170.55319148936172], [498.0, 190.81578947368422], [497.0, 215.60714285714286], [496.0, 155.63636363636363], [507.0, 349.625], [506.0, 173.86792452830193], [504.0, 182.11764705882354], [505.0, 374.72727272727275], [503.0, 467.52941176470586], [502.0, 284.35714285714283], [501.0, 323.0], [500.0, 248.11764705882354], [539.0, 211.66666666666666], [541.0, 402.4], [518.0, 139.79999999999998], [517.0, 211.94444444444446], [516.0, 908.9811320754714], [515.0, 519.9285714285716], [514.0, 490.30769230769226], [513.0, 168.57894736842107], [512.0, 98.58333333333334], [519.0, 314.0526315789474], [536.0, 237.35294117647058], [527.0, 278.99999999999994], [526.0, 347.6842105263158], [525.0, 192.35000000000002], [524.0, 301.8888888888889], [523.0, 990.2500000000001], [522.0, 189.3], [521.0, 444.59090909090907], [520.0, 354.4545454545455], [542.0, 214.8947368421053], [543.0, 170.84615384615384], [540.0, 293.6086956521738], [538.0, 237.69565217391306], [537.0, 189.96551724137936], [530.0, 88.62251655629137], [529.0, 291.5], [531.0, 294.35999999999996], [533.0, 300.3333333333333], [532.0, 219.1923076923077], [535.0, 276.8181818181818], [534.0, 139.14285714285714], [528.0, 135.79999999999998], [548.0, 184.8], [574.0, 277.2105263157894], [545.0, 491.84999999999997], [544.0, 301.35], [559.0, 179.49999999999997], [558.0, 163.15384615384613], [556.0, 118.33333333333334], [557.0, 267.8888888888889], [555.0, 432.8], [554.0, 282.1538461538462], [553.0, 92.77777777777777], [552.0, 451.3529411764706], [547.0, 324.79999999999995], [546.0, 382.77777777777777], [575.0, 207.33333333333334], [560.0, 370.4], [572.0, 395.6], [571.0, 257.3636363636364], [573.0, 177.94117647058823], [570.0, 260.8181818181818], [569.0, 310.14285714285717], [568.0, 166.27272727272728], [550.0, 348.18181818181813], [551.0, 371.90909090909093], [549.0, 155.66666666666666], [567.0, 292.33333333333337], [566.0, 206.15384615384613], [564.0, 108.325], [562.0, 209.76923076923077], [563.0, 391.6363636363636], [565.0, 215.74999999999997], [561.0, 382.10526315789474], [581.0, 455.6923076923077], [594.0, 533.8571428571428], [599.0, 324.75000000000006], [597.0, 219.0], [598.0, 160.92307692307696], [588.0, 323.15873015873007], [596.0, 372.7], [595.0, 429.79999999999995], [587.0, 226.7857142857143], [586.0, 512.5882352941176], [585.0, 431.99999999999994], [584.0, 224.15789473684208], [590.0, 344.0476190476191], [577.0, 216.49999999999997], [576.0, 354.33333333333326], [591.0, 171.0], [580.0, 288.07142857142856], [579.0, 433.3333333333333], [578.0, 342.12499999999994], [582.0, 126.3947368421053], [583.0, 92.48484848484848], [607.0, 152.10000000000002], [592.0, 289.875], [593.0, 129.0], [606.0, 318.69230769230774], [604.0, 381.5833333333333], [603.0, 351.2], [605.0, 323.2307692307692], [602.0, 227.0], [601.0, 335.42857142857144], [600.0, 431.2307692307693], [589.0, 350.00000000000006], [634.0, 448.92857142857144], [627.0, 123.0], [638.0, 150.1428571428571], [637.0, 514.0], [639.0, 304.2], [636.0, 383.86666666666673], [635.0, 160.27777777777777], [623.0, 243.39999999999998], [608.0, 444.6111111111111], [610.0, 273.62500000000006], [609.0, 192.42857142857142], [613.0, 376.63636363636374], [612.0, 397.2], [611.0, 129.15384615384613], [615.0, 385.41666666666663], [632.0, 215.0], [633.0, 419.0], [614.0, 226.2142857142857], [622.0, 486.6666666666667], [621.0, 347.0833333333333], [620.0, 303.75], [619.0, 296.58333333333337], [618.0, 255.3], [617.0, 344.5833333333333], [616.0, 396.3333333333333], [631.0, 353.6190476190476], [630.0, 511.24999999999994], [629.0, 226.39999999999998], [628.0, 222.0625], [625.0, 219.06382978723406], [626.0, 236.05405405405403], [624.0, 557.4666666666667], [664.0, 127.75], [669.0, 135.2], [670.0, 156.10000000000002], [656.0, 357.75], [671.0, 116.42857142857143], [659.0, 220.31818181818178], [658.0, 266.68750000000006], [657.0, 199.0], [667.0, 144.22222222222223], [668.0, 154.5], [666.0, 186.27272727272725], [665.0, 334.2], [655.0, 365.0], [642.0, 137.14285714285714], [643.0, 140.0], [641.0, 175.14285714285714], [640.0, 461.57142857142856], [646.0, 107.11111111111111], [645.0, 198.5], [647.0, 92.0], [644.0, 167.84615384615384], [654.0, 104.875], [652.0, 232.7], [653.0, 163.14285714285714], [651.0, 166.66666666666666], [649.0, 139.12500000000003], [650.0, 213.66666666666666], [648.0, 133.88888888888889], [663.0, 96.0], [662.0, 93.0], [661.0, 264.25], [660.0, 75.0], [696.0, 393.8], [701.0, 417.2857142857143], [702.0, 530.0], [703.0, 129.5], [690.0, 146.11363636363637], [688.0, 439.75], [689.0, 164.5], [700.0, 420.70000000000005], [699.0, 233.5], [698.0, 485.4375], [697.0, 258.0], [687.0, 387.09090909090907], [686.0, 428.25], [685.0, 260.7777777777777], [673.0, 194.89999999999998], [672.0, 131.88888888888889], [676.0, 145.09999999999997], [675.0, 131.66666666666666], [674.0, 156.5], [679.0, 155.0], [678.0, 136.0], [677.0, 152.49999999999997], [684.0, 128.625], [683.0, 102.83333333333333], [682.0, 175.77777777777777], [680.0, 288.14285714285717], [681.0, 206.38888888888889], [695.0, 300.3333333333333], [694.0, 231.66666666666666], [692.0, 357.47058823529414], [693.0, 111.8], [691.0, 444.66666666666663], [731.0, 463.55555555555554], [727.0, 216.0], [726.0, 803.3333333333333], [710.0, 258.9565217391305], [708.0, 439.0], [709.0, 370.6], [707.0, 287.6], [705.0, 287.875], [704.0, 438.0], [706.0, 496.25], [719.0, 156.0], [718.0, 148.66666666666666], [717.0, 816.6666666666667], [716.0, 124.5], [715.0, 423.75], [712.0, 140.8], [713.0, 475.2857142857143], [714.0, 331.88888888888886], [734.0, 171.11111111111111], [733.0, 386.2], [732.0, 177.5], [728.0, 429.25], [711.0, 430.25], [730.0, 299.375], [729.0, 736.0], [725.0, 469.0], [724.0, 155.4], [723.0, 193.0], [735.0, 161.0], [721.0, 214.5], [722.0, 1210.0], [720.0, 437.22222222222223], [763.0, 309.3333333333333], [767.0, 323.67741935483883], [752.0, 350.375], [754.0, 315.16666666666663], [753.0, 236.4], [756.0, 328.14814814814815], [755.0, 195.99999999999997], [766.0, 391.95121951219505], [765.0, 546.684210526316], [764.0, 268.70588235294116], [747.0, 472.22222222222223], [748.0, 1196.0], [746.0, 188.0], [745.0, 406.0], [744.0, 277.0], [750.0, 305.3125], [749.0, 385.66666666666663], [736.0, 190.8], [737.0, 556.3333333333334], [739.0, 682.5], [738.0, 213.0], [741.0, 372.7142857142857], [740.0, 441.625], [751.0, 441.25], [762.0, 423.7142857142858], [761.0, 374.8235294117647], [760.0, 246.77777777777774], [743.0, 1194.0], [742.0, 321.0], [759.0, 506.25], [758.0, 497.60000000000025], [757.0, 249.00000000000003], [795.0, 188.75], [773.0, 216.0], [771.0, 145.91666666666666], [768.0, 297.5238095238096], [783.0, 535.6666666666667], [782.0, 737.75], [781.0, 417.33333333333337], [779.0, 307.3333333333333], [778.0, 516.0], [776.0, 519.25], [777.0, 1203.0], [780.0, 479.0], [770.0, 240.00000000000003], [769.0, 357.57142857142856], [774.0, 132.33333333333331], [792.0, 210.0], [775.0, 864.0], [794.0, 673.75], [793.0, 496.42857142857144], [796.0, 540.0], [772.0, 553.75], [799.0, 775.4], [798.0, 210.0], [785.0, 657.6], [784.0, 704.0], [787.0, 450.5], [786.0, 556.3333333333334], [789.0, 457.25], [788.0, 497.1428571428571], [791.0, 685.1666666666666], [790.0, 1255.5], [797.0, 1324.0], [825.0, 488.0], [830.0, 202.0], [831.0, 205.0], [817.0, 743.5], [820.0, 1293.0], [819.0, 928.0], [829.0, 208.0], [828.0, 194.0], [826.0, 472.0], [824.0, 208.0], [807.0, 118.33333333333333], [806.0, 140.25], [804.0, 265.0], [805.0, 124.0], [803.0, 142.5], [801.0, 211.0], [800.0, 439.0], [802.0, 181.66666666666666], [815.0, 207.0], [813.0, 305.5], [814.0, 116.5], [812.0, 205.0], [811.0, 157.5], [810.0, 160.0], [809.0, 175.33333333333334], [808.0, 181.75], [823.0, 508.5], [821.0, 1318.0], [860.0, 525.0], [863.0, 194.5], [850.0, 212.0], [849.0, 1291.0], [859.0, 521.0], [858.0, 1310.0], [856.0, 680.0], [846.0, 751.5], [832.0, 214.0], [834.0, 386.3333333333333], [833.0, 201.0], [837.0, 213.0], [835.0, 355.5], [845.0, 198.0], [844.0, 190.0], [841.0, 202.0], [840.0, 209.0], [857.0, 461.3571428571429], [855.0, 202.0], [854.0, 199.0], [852.0, 189.0], [851.0, 1232.0], [892.0, 248.6], [894.0, 508.0], [891.0, 199.0], [890.0, 1180.0], [889.0, 376.66666666666663], [888.0, 1290.0], [878.0, 208.5], [864.0, 731.5], [866.0, 560.0], [865.0, 199.0], [871.0, 369.5], [869.0, 186.0], [876.0, 214.66666666666666], [874.0, 207.0], [873.0, 215.0], [872.0, 216.5], [887.0, 190.0], [883.0, 191.0], [882.0, 631.0], [880.0, 202.0], [921.0, 1221.0], [914.0, 140.0], [924.0, 145.5], [926.0, 875.0], [913.0, 306.0], [923.0, 1224.0], [920.0, 148.5], [903.0, 142.0], [902.0, 141.0], [901.0, 150.0], [900.0, 871.5], [899.0, 1274.0], [898.0, 893.6666666666667], [897.0, 187.0], [896.0, 178.5], [911.0, 154.0], [909.0, 152.0], [908.0, 153.0], [906.0, 1263.0], [905.0, 152.0], [918.0, 1256.0], [917.0, 150.0], [915.0, 469.0], [935.0, 312.5], [933.0, 1017.5], [932.0, 142.0], [931.0, 158.0], [929.0, 1255.0], [928.0, 1244.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[460.87350000000066, 282.2277000000004]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 935.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 31937.8, "minX": 1.73335644E12, "maxY": 91220.61666666667, "series": [{"data": [[1.73335644E12, 91220.61666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73335644E12, 31937.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73335644E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 282.2277000000004, "minX": 1.73335644E12, "maxY": 282.2277000000004, "series": [{"data": [[1.73335644E12, 282.2277000000004]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73335644E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 272.0990000000003, "minX": 1.73335644E12, "maxY": 272.0990000000003, "series": [{"data": [[1.73335644E12, 272.0990000000003]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73335644E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.5647999999999996, "minX": 1.73335644E12, "maxY": 0.5647999999999996, "series": [{"data": [[1.73335644E12, 0.5647999999999996]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73335644E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.73335644E12, "maxY": 3389.0, "series": [{"data": [[1.73335644E12, 3389.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73335644E12, 2.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73335644E12, 1148.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73335644E12, 2152.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73335644E12, 141.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.73335644E12, 1246.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73335644E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 42.0, "minX": 149.0, "maxY": 1243.0, "series": [{"data": [[2160.0, 186.0], [1115.0, 250.0], [149.0, 1243.0], [1240.0, 103.0], [1231.0, 225.0], [1336.0, 180.0], [1822.0, 109.0], [947.0, 42.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2160.0, 54.0], [1115.0, 165.0], [1231.0, 87.0], [1336.0, 45.0], [1822.0, 72.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2160.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 149.0, "maxY": 1243.0, "series": [{"data": [[2160.0, 186.0], [1115.0, 250.0], [149.0, 1243.0], [1240.0, 102.5], [1231.0, 225.0], [1336.0, 180.0], [1822.0, 109.0], [947.0, 42.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2160.0, 0.0], [1115.0, 0.0], [1231.0, 0.0], [1336.0, 0.0], [1822.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2160.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.73335644E12, "maxY": 166.66666666666666, "series": [{"data": [[1.73335644E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73335644E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.016666666666666, "minX": 1.73335644E12, "maxY": 150.65, "series": [{"data": [[1.73335644E12, 150.65]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.73335644E12, 16.016666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73335644E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.016666666666666, "minX": 1.73335644E12, "maxY": 150.65, "series": [{"data": [[1.73335644E12, 150.65]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.73335644E12, 16.016666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73335644E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.016666666666666, "minX": 1.73335644E12, "maxY": 150.65, "series": [{"data": [[1.73335644E12, 150.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.73335644E12, 16.016666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73335644E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

